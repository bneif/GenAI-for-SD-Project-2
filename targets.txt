if ignore_timeouts and is_timeout ( e ) :
if prev_mem is None :
if example_len > max_length :
if item . get ( "type" , "" ) == "audio" :
if var . must_contain ( "/" ) :
if socketID [ 1 ] :
if curses . tigetnum ( "colors" ) > 0 :
if offset_so_far % align != 0 :
if type ( value ) == list :
if "co" in dt_string or "ci" in dt_string or "nc" in dt_string :
if not isinstance ( item , str ) :
if not isinstance ( result_key , list ) :
if file_name . endswith ( ".snap" ) :
if s not in statement :
if check . message :
if build_data . built ( dpath ) :
if self . dropout_prob > 0.0
if widgets is None :
if events | pyuv . fs . UV_RENAME :
if tag_dict [ "name" ] == tag :
if max_items :
if array . has_property ( unicode ( k ) ) :
if item != dst :
if job_id in key :
elif item [ 2 ] :
if os . path . exists ( data_file ) :
if action_name not in handlers :
if ref [ "id" ] == story_id :
if i == j :
if op . attr_key == "storage_scope" :
if asname is None :
if matched :
if not self . get ( "datacenter" ) :
if not is_safe_url ( url = back_url , allowed_hosts = { self . request . get_host ( ) } ) :
if not url . startswith ( "http://" ) :
if not self . fileName :
if item :
if first_to_delete == 0 and len ( self ) > 0 :
if old_album_title == track . metadata [ "album" ] :
if target == "*" :
if not osp . isfile ( filename ) :
if type_name not in new_results :
if account_id in config . get ( "celery.test_account_ids" , [ ] ) :
if topic in feconf . AVAILABLE_LANDING_PAGES [ subject ] :
if destpath is None :
if self . _start_index_is_ok ( string , index ) :
elif rasa . shared . data . is_likely_yaml_file ( export_path ) :
if p . hasNext ( ) :
if value is None :
if desc . getAttributeNS ( RDF_NAMESPACE , "about" ) == aboutUri :
if self . timeout is not None :
if message_text != "" :
if conn :
if not data and n != 0 :
if command . cmd == MACHOFlags . LC_SEGMENT :
if verbosity >= 2 :
if url :
if line . lower ( ) . startswith ( "version:" ) :
if key in self . _store :
if row . get_string ( "User" ) not in connections :
if env . cache_static :
if need_to_add_callback :
if tables :
if hasattr ( subscriber , "_pyroUri" ) :
if job_id is None :
if self . config . use_https :
if update_text and title and ipaddress :
elif item [ "layout" ] == "vert" :
if user_data . error :
if frac < 0 :
elif os . path . exists ( os . path . join ( basedir , filename ) ) :
if effect . isAssistance is True :
if dist < min_dist :
if self . _is_default_route ( route ) :
elif isinstance ( d , bytes ) :
if func :
if isinstance ( item , AST ) :
if v [ "Category" ] != "Deprecated" :
if isinstance ( v , dict ) :
elif self . _keys [ hash_ ] == key :
if not self . http1 :
if r . failed :
if result . deleted_count > 0 :
if e in env_variables :
if source not in service . options :
if when > 0.0 and not self . session . shutdownstarttime :
if timeout_multiplier <= 0.5 :
if not res :
if vr :
if cgiName in self . headerNames :
if string_value is not None :
if not self . config . label_enable or ouro_label . lower ( ) in [ "true" , "yes" ] :
if nei >= len ( self . _editableChildren ) :
if mtp_name != "" and mtp is None :
if fd not in keep :
if first_child . hasChildNodes ( ) :
if is_text_payload ( request ) and request . body :
if mod not in self . disabled_modules :
if isinstance ( win , RibbonControl ) :
if name in pname :
if element [ 3 ] and element [ 4 ] :
if self . column > max_indent :
elif col == FOOD :
if branch_wise_entries . get ( d . branch ) :
if task_id in self . cluster_state . tasks
if os . path . basename ( p ) != "CVS" and os . path . isdir ( os . path . join ( d , p ) )
if isinstance ( command , str ) :
if self . dirscan_speed and not self . shutdown :
elif not isinstance ( data , HTTPDisconnect ) :
if text . startswith ( px ) :
elif type ( item ) in ( list , tuple , dict , set ) :
elif module in _compat_pickle . IMPORT_MAPPING :
if not wr :
if not inspect . iscoroutinefunction ( implemented_method ) :
if content or arguments or options :
if not w . timer_cls :
if isinstance ( request . getfixturevalue ( request . param ) , str ) :
if isinstance ( value , tf . keras . layers . Layer ) :
if not url . isLocalFile ( ) :
if ndx > 0 :
elif np . array_equal ( observed , self . blur5x5 ) :
if not self . is_playback ( ) :
if isinstance ( device , IOCB )
if not self . sub_unit_2 [ "fitted" ] :
if return_id_list :
if c :
if isinstance ( plex_section , list ) :
if e . xany . type not in ( xlib . KeyPress , xlib . KeyRelease ) :
if len ( self . possibilities ) == 1 :
if page_token is None :
if context_id_list_tuple is _SHUTDOWN_SENTINEL :
if path . lower ( ) . endswith ( ".egg" ) :
elif os . path . isdir ( val ) :
if itemid :
if not bytes :
if attrs & mask :
if isinstance ( conf . cookie , dict ) :
if not self . _alive or not other . _alive :
if reset is False :
elif key == "nw_dst" :
if k in keep_current :
if p and p . isMarked ( ) :
if k in striped_keys :
if X2 is None or X is X2 :
if os . path . isfile ( real_path ) :
if match :
if re . match ( "[0-9]" , str ( tokens [ e ] ) ) :
if replace :
if id ( bp ) == item_id :
if future_nzo . url_tries > cfg . max_url_retries ( ) :
if not_numeric :
if self . prefix == event [ : len ( self . prefix ) ] :
if inspect . ismodule ( attr ) :
if view . buffer_id ( ) in persist . assigned_linters and view . is_primary ( ) :
if gender >= 0 :
if project . add_to_pythonpath ( path ) :
if not isinstance ( value . grid_id , ObjectId ) :
if if_first :
elif code == Path . CURVE4 :
if build_info [ "building" ] :
if type ( default ) == float :
if response . status >= 300 :
if not isinstance ( x , str ) :
if child != toggle :
elif patching . new is DEFAULT :
if attrnames . has_key ( mask ) :
if "init" not in item . keywords :
if len ( chunk ) < 4 :
elif self . _foreach_mode == "set" :
elif head_name != "System`Missing" :
if re . match ( regex , token ) is not None :
if node . module == "__future__" :
if len ( new_list ) == args . batch_size_limit :
if not upstream_b :
if not hasattr ( self , name ) :
if not self . _override :
if b64 :
if p [ 0 ] not in parts :
if t :
if not DISABLE_KEYLEN_ERROR :
if during is not None :
if self . string [ pos ] == "." :
if e . errno != errno . EEXIST :
if pass_widget :
if not self . expect_exception :
if realm is None :
if ( yield self . tck . o ) == pos :
if self . _tree :
if not searchtrie . has_key ( token ) :
if param is None :
elif donel [ 0 ] :
if change . project is None or user . can_access_project ( change . project ) :
if action . data . get ( "target_group_arn" ) == target_group_arn :
if w not in self . word_dict :
if line . startswith ( "[" ) :
if signum != signal . SIGKILL and not hook_result :
if total_amount_in_payments < invoice_total :
if not cache [ key ] :
if array . compare ( j , j + 1 ) <= 0 :
if state == action_constants . LIVEACTION_STATUS_REQUESTED :
if type ( submob ) != AnnularSector :
if "." in warning_type :
if timeout == - 1 :
if samefile ( dir , os . curdir ) :
if c != temp :
if self . get ( soil_type ) > 100 or self . get ( soil_type ) < 0 :
if run :
if dir == prevdir or not dir :
if datestring . endswith ( "Z" ) :
if line != " " and line != "" :
if isinstance ( s , ProgBits ) :
if not filename :
if args . host :
elif isinstance ( row , ConfiguredWorker ) :
if not hasattr ( node . fgraph , "shape_feature" ) :
if not os . path . exists ( ini_path ) :
if isinstance ( m , nn . Conv2d ) :
if value == "DD-MM-YYYY" :
if hasattr ( py_obj , "_boxes" ) and py_obj . _boxes :
elif stat . S_ISDIR ( st . st_mode ) :
if query_starts_with ( query , keywords ) is True :
if get_sql_dialect ( self . session ) == "sqlite" :
if i > 0 :
if isinstance ( value , dict ) :
if " : " in header :
if isinstance ( v , ( list , tuple ) ) :
if item_key != "sourceVault" :
if isinstance ( fvalue , Packet ) :
if sub_fields is not None :
if not passphrase :
if tzinfo is None :
if not _RE_HEADER . match ( line ) :
if os . path . exists ( uri ) == True :
if "<frozen importlib._bootstrap" in child . file_path :
if layer_name in graph :
elif i == 1 :
if used > 1 :
if length > 0 :
if unzip and zipfile . is_zipfile ( uploaded_file ) :
if self . is_secret_false_positive ( identifier ) :
elif "IsRequired" in spec and spec [ "IsRequired" ] :
elif mod_type == imp . PKG_DIRECTORY :
if operand . ndim < 2 or operand . shape [ - 2 ] != operand . shape [ - 1 ] :
if not param_match :
if self . network . state_dict ( ) . get ( new_param ) is not None :
if isinstance ( value , np . ndarray ) :
if len ( palette . value ) > 0 and "," in palette . value :
if len ( blockRenderers ) < len ( self . blockRenderers ) :
if line . startswith ( "#" ) or line == "" :
if rel_path is None :
if not platform . is_linux ( ) :
if isinstance ( process , self . queryset . model ) :
if isinstance ( c , addnodes . start_of_file ) :
if not self . batch_mode :
if match :
if hasattr ( data , "next" ) or hasattr ( data , "__next__" ) :
if Config . get ( "current_download" ) == self . game . id :
if doc :
if self . src_removed :
if not is_string ( name ) :
if Driver . needsQuoting ( val , True ) :
if n . op in failed_ops :
if self . expected_inner_sha256 :
if self . _widgets__ [ n ] . editable and not self . _widgets__ [ n ] . hidden :
if message_id not in self . _events :
if res :
if action_node . notify :
elif isinstance ( centered , torch . Tensor ) :
if matches :
elif size <= 9 :
if cur_timeout > 0 :
if self . query_id != query . query_id :
if recurseInAnon :
if penalty == L2 :
if not os . path . isfile ( path ) :
if field . id_decode :
if path . exists ( ) :
if nca . header . getIsGameCard ( ) == targetValue :
elif mode == "key" :
if name not in seen :
elif _is_int_seq ( inputs [ 1 ] ) :
if len ( bucket ) :
if isinstance ( resultset , dict ) and "duration" in resultset :
if devices :
if key != "User-Agent" :
if not metadata . get ( "nargs" ) :
elif self . action_input . selected_index == 2 :
if enable :
if attachment . post :
elif isinstance ( index , slice ) :
if self . _pos < start :
if "meta-environment" in root or "cross-canadian" in root :
if encoding == "x509_asn" :
if isinstance ( tokenizer , BertTokenizer ) :
if resolve :
if hasattr ( base , "garbage" ) :
if printElemNumber :
elif c == ">" :
if i + batch_size <= total :
if splitrow [ 0 ] == "INFO:" :
if not result :
if addon . _current_version_id == version . id :
if other_axis == axis_name :
if old in kwargs :
if attempts < 4 :
if pcount > PREFETCH_COUNT_MAX :
if self . prefix :
if name not in skip :
if set_ [ i ] [ 0 ] >= set_ [ i + 1 ] [ 0 ] :
if not os . path . isdir ( pp ) :
if code not in allow_transfer_encoding_codes :
if hint is NotImplemented or not isinstance ( hint , int_types ) or hint < 0 :
if isdir :
if source not in self . data :
if optstring == "" :
if ignore_keys and k in ignore_keys :
if b :
elif answer . upper ( ) == "R" :
if isinstance ( in_arrays , tuple ) :
if not util . wait_for_write ( self . socket , self . socket . gettimeout ( ) ) :
if len ( parts ) > 1 :
if setter is not None and isinstance ( setter , collections . Callable ) :
if self . _tex_coords_cache_version != self . domain . _version :
if char == br :
if os . path . exists ( path ) :
if tweak is None :
if chgd != ss . value :
if min [ d ] > node . data [ d ] :
if m is None or prefix_pattern == "" :
elif colorama :
if isinstance ( child , wx . lib . stattext . GenStaticText ) :
if self . M is None :
if self . visdom :
if e . get ( "event" ) == UserUttered . type_name :
if port . port_no == in_port :
if 20 < ( proposed_next_month - dt ) . days < 40 :
if error is not None :
if mapper is not None :
if isinstance ( arg , bool ) :
elif isinstance ( test , unittest . TestCase ) :
if page . relations . disambiguation_links_norm is not None :
if isinstance ( expected , Exception ) :
if root . startswith ( p ) :
if event :
if histo [ key ] >= maxKey :
if is_ST3 ( ) :
if len ( items ) > 0 :
if os . path . isdir ( p ) :
if "pseudo-interface" in nic . replace ( " " , "-" ) . lower ( ) :
if attrs is None :
if screenshot_name :
if WIN or greentest . LINUX :
if "Error" in s or "Exception" in s :
if passed :
if len ( data ) > 20 :
if key in self . clean_args :
elif self . end_id < pack_id :
if self . _anchors_none :
if trial & 1 :
if res == _subprocess . WAIT_OBJECT_0 :
elif value is None :
if self . mismatch_description :
if list ( config . keys ( ) ) == [ "$env" ] :
if os . path . isfile ( datafilename ) :
if self . block :
if error_on_path :
if sparse_A . type . format == "csc" :
if len ( actions ) == self . num_envs :
if ex . errno == errno . EINTR :
if learner . dfa . matches ( s ) != learner . member ( s ) :
if cost_name == "cosine" :
if not isinstance ( dirname , str ) :
if self . _return_feature ( f ) and hasattr ( f , name ) :
if not occupied :
if key in cls . dynamic_methods :
if is_leaf ( child ) and hasattr ( child , "old_forward" ) :
if obj . __class__ in ( Double , Long ) :
if not copyright . find ( "200" ) >= 0 and not copyright . find ( "199" ) >= 0 :
if context . next_indent > context . indent :
if log_cmd . check ( f"docker logs for {self.path.k8s}" ) :
if node . id == master . id :
if agent_name not in unsupported_agents :
elif isinstance ( plug , Gaffer . Color3fPlug ) :
if not ( "success" in out ) or not out [ "success" ] :
if tag == "layers" :
if not node :
elif val < 1024 ** 3 :
if reuse_len is not None and reuse_len > 0 :
if builder . provider . dialect == "MySQL" :
if not cf . required :
if possible_child_hash == item_hash :
if self . use_parallel_executor and not self . use_double_buffer :
if cell not in self . cell_id_map :
if marker == ">>" :
if isinstance ( child , pytree . Leaf ) and child . value == "|" :
if len ( data ) < 1000 :
if not any ( isinstance ( m . message , expected ) for m in w ) :
if k . startswith ( "__" ) :
if omit and start :
if buffer [ offset ] == BLOCK_MARKER . READ :
if not instance_info . is_running ( ) :
if app_config . IS_MSSQL :
if self . _LazyAddAttr_ ( attr ) :
if not self . management_form . is_valid ( ) :
if not RegionSizeGuid :
if "day_incomplete_message" in completion_message . classes :
if self . _stopped :
elif "regex" in literal_or_identifier :
if process_fn is None :
if self . _has_reference_screenshots ( ) :
if task . silent_abort :
if not self . block ( user_id ) :
if not r is None :
if method is not None :
if t . id != Id . Ignored_LineCont :
if ctx :
if line . startswith ( b"OK" ) :
if stat . S_ISDIR ( int ( response . st_mode ) ) :
if self . norm_means :
if self . implementsAnyFixture ( ancestor , ctx_callback = ctx_callback ) :
if moduleID == modModified :
if host . lower ( ) == self . host and port == self . port :
if panel_name :
if isinstance ( node , nodes . document ) :
if tt == 0 :
if strict :
elif event . GetKeyCode ( ) == wx . WXK_DELETE :
if not self . sync_up ( ) :
if downloads :
if line != newline :
if hasattr ( self , "instance_id" ) :
if count % 5 == 0 :
if fieldname in canonical_field_names and fieldname == "source" :
if not layouts . get ( h ) :
if defaults is None :
if isinstance ( v , list ) :
if self . size :
elif mode == "add" :
if in_word :
if len_map is not None :
if f . __doc__ :
if category not in self . errors_by_category :
if _ in data :
if count > threshold :
if token . ClosesScope ( ) :
elif s . startswith ( "Proc-Type" ) and "ENCRYPTED" in s :
if active :
if len ( self . lpar ) == 0 :
if vm :
if name != "__init__" :
if QtCore :
if self_log :
if isinstance ( v , I18nFormField ) :
if new_val != old_val :
if os . path . exists ( main_vault_directory ) :
if update_previous_revision :
if name in self . __ast_frozen_fields__ :
if arg not in data or ( isinstance ( data [ arg ] , list ) and len ( data [ arg ] ) < 1 ) :
if ( w , pos ) not in self . composite_dict :
elif obj . name == "q" :
if commands [ command_count ] :
if context . check_call_arg_value ( "debug" , "True" ) :
if request :
if offer . job_applicant not in ja_joff_map . keys ( ) :
if len ( t ) == 1 :
if any ( ( dirpath . startswith ( s + os . sep ) or s == dirpath ) for s in skip ) :
if units == "units" :
if hasattr ( policy . featurizer , "max_history" ) :
if self . settings . get ( IGNORE_CASE_SETTING ) :
if remaining [ 0 ] != ")" :
if attrs [ 1 ] :
if not isinstance ( controls_ids , list ) :
if isinstance ( value , Value ) :
if is_strong and property in self . _properties :
if start < 0 :
if mod . type == "DISPLACE" :
if isinstance ( path , tuple ) :
if build_data . built ( dpath ) :
if inputs :
if self . indchar is None :
if processor_id in self . mappings :
if chunk is not None :
if prefetch :
if self . config . absolute_paths :
if 2 <= i <= 8 :
if namespace is not None :
if result :
if not isinstance ( typ , NoneType ) :
if len ( items ) > 1 :
if os . path . exists ( self . icon ) :
if handler . name == "stdoutLogger" :
if self . cleaned_data . get ( "update" , None ) or not self . instance . stores . count ( ) :
if tail :
if "event" in settings :
if name not in state :
if row :
if len ( fsize ) == 2 :
if not cur :
if status . get ( "item" , None ) in acceptable_statuses :
if not isinstance ( body , self . _handler . message_type ) :
if hasattr ( page , "source" ) and isinstance ( page . source , File ) :
if best_silhouette is None :
if partition_id in self . _consumers :
if result is None :
if clear :
if c == 0 :
if item is None :
if k in self . schema . get ( "secret" , [ ] ) and v == SECRET_PLACEHOLDER :
if check_unknown :
if len ( set ( shapes ) ) == 1 :
if is_prev :
if isinstance ( v , dict ) :
if self . __stack . count ( ) > 1 :
if url . startswith ( "https://" ) :
if isinstance ( o , Iterable )
if lemma is None :
if len ( color ) == 4 :
if not name :
if status is not None :
if sys . stdin . closed :
if ignore_non_errors and is_noerr ( e ) :
if htype == "Date" :
if refine :
if font_datablock :
if self . __class__ is other . __class__ :
if isinstance ( field , _ContainerMixin ) :
if not isinstance ( a , IncludeDirs ) :
if abs_array < 1.0 :
if w not in index :
if i . name == balancer . name and i . id is not None :
if "app" in scope :
elif isinstance ( d , basestring ) :
if mod == "__init__" or not mod . startswith ( "_" ) :
if alias not in excluded_aliases :
if event != item . event :
if idx == num :
if inst . isa_set in chipdb [ chip ] :
if not topic_name . startswith ( "." ) :
if name and id_ :
if not hasattr ( m , "likelihood" ) :
if header == b"OXLI" :
if isinstance ( v , list ) :
if self . _generated is None :
if len ( tasks ) != 1 or is_list ( tasks [ 0 ] ) :
if file_sources is None :
if c . IsOk ( ) :
if obj . typecode == "u" :
if not self . dry_run :
elif token . token_type == TOKEN_VAR :
if np . any ( is_NA ) :
if not int ( idx ) == 0 :
if ( msg_ts > ( time . time ( ) + 24 * 3600 ) ) or ( msg_ts < 1 ) :
if chosen_db :
if key in IGNORED_KEYS :
if not row :
if re . match ( json_pattern , line ) :
if score is not None :
if support . match_test ( test ) :
if dead_threads :
if order_by . startswith ( "-" ) :
if 0 < dt :
if getattr ( sys , "_MEIPASS" , "" ) is not None :
if _allowCapitalizedNames :
if username not in self . _ignore_users :
if letter . isalnum ( ) or letter == " " :
if not is_command ( line ) :
if not record :
if gen is not None :
if not self . indexobj [ base + ind ] :
if cls . __name__ != "DirectiveAdapter" :
if not src :
if self . sort_indices :
if ( col_val is not None ) and ( not is_quantity ( col_val ) ) :
if proc . is_alive ( ) :
if neededCopies == 0 :
if states . get ( "warmup_scheduler" ) :
if v is raiseme :
if isinstance ( data , InstrumentedList ) or isinstance ( data , list ) :
if sys . _getframe ( 1 ) . f_globals [ "__name__" ] not in [ "abc" , "functools" ] :
if version . startswith ( "pypy" )
if app is None and body is not None :
if v is None :
if random . random ( ) < self . off_pol_frac :
if os . path . isdir ( locale_dir ) :
if email :
if not c . isVisible ( ) :
if href :
if not version :
if self . _worker_thread_done :
if not self . attributes :
if credentails . get ( "response" ) == response_hash :
elif ctx . running_mode == RunningMode . local_cluster :
elif registries . match ( handler = handler , cause = cause , ignore_fields = True ) :
if completed_process . stdout is not None :
if decomposed is None :
if self . app . UntitledNotepad [ "Do&n't Save" ] . exists ( ) :
if proc . poll ( ) is None :
if isinstance ( expectation , str ) :
if all ( isint ( k ) for k in d ) :
if subr != const . ENoError :
if condfield in sigmaparser . values :
if granted or user . has_perm ( perm ) :
if earlier_part == current [ "part" ] and earlier_step == current [ "step" ] :
if wnd_name in self . capture_mouse_windows :
if next == - 1 :
elif other [ i ] < self [ i ] :
elif not user :
if self . utexc is not True :
if t == "Handle" and m == "InMode" :
if not text . endswith ( "\n" ) :
elif self . _pos == start :
if "Address already in use" in e :
if self . expr is not None :
if res . source_file == page . source_file :
if tlv . tlv_type == LLDP_TLV_END :
if not ignore_pull_failures :
if isinstance ( const , blocks . OrderedCode ) :
if hasattr ( local_stdout , "buffer" ) :
elif line . startswith ( "FAIL:" ) and prev_line and prev_line . startswith ( "=" ) :
if self . _tail :
if consumer . in_parser . is_message_complete ( ) :
if cat == "None" :
if strategy == self :
if delete :
if async_load :
elif self . lookup_opts . ordering :
if persistent is not None and b . persistent != persistent :
if "/* get_messages */" in query [ "sql" ] :
if i == current_sequence ( ) . get_first_active_track ( ) . id :
if postdata :
if not sys . platform . startswith ( "java" ) :
if f is not None and f . type in ( "or" , "and" , "not" ) :
if code [ pos ] == '"' :
if not path . startswith ( name + "/" ) :
if i >= self . tailoff ( ) :
if isinstance ( other , np . ndarray ) :
elif statusline == "added:" :
if timestamp is not None :
if now - os . path . getatime ( path ) > 129600 :
if stdout :
if info . get ( info_f ) is not None :
if model_site [ "type" ] == "sample" :
if not line or not line [ 0 ] . isspace ( ) :
if infinite :
if dst_nodes is not None and ntype in dst_nodes :
if m in candidates :
if isinstance ( col , CurrentColumn ) :
if isinstance ( value , toga . Widget ) :
if len ( self . flat_conditions ) == 1 :
elif delimiter in b :
if self . width not in [ 100 , 50 , 33 , 25 ] :
if idx != len ( self . input_dims [ 0 ] ) - 2 :
elif status == MemcacheDeleteResponse . NOT_FOUND :
if not scope_region . empty ( ) :
if when_value is not None :
if self . is_live :
if continue_url :
if isinstance ( name , str )
if self . request . query :
if tok . endswith ( marker ) :
if self . select ( i ) :
if "iflytek_yuyin" in profile :
if account_info [ "user" ] [ "type" ] != "servicePrincipal" :
if old_name in relproj :
if a . ptr == b . ptr :
if ch == "%" :
if stat . S_ISDIR ( st [ stat . ST_MODE ] ) :
if isinstance ( widget_or_spacing , int ) :
if section == "default" :
if SCons . Util . is_Sequence ( c ) :
elif decode :
if not Placeholder . check_resolved ( v . size ) :
elif op_gprv ( op ) :
if len ( gdirs ) == 1 and os . path . exists ( gdirs [ 0 ] ) :
if module . endswith ( self . default_indicator ) :
if "metadata" in updates :
if actual_tags :
if not error_msg and not callable ( getattr ( wsgi_errors , method ) ) :
if m . start ( 2 ) <= cursor_offset and m . end ( 2 ) >= cursor_offset :
if sizes [ 0 ] == 0 :
if len ( items ) > 1 :
if not tag . text :
if queryreturn != [ ] :
if "momentum" in self . args :
if "errors" in kwargs :
if self . _THISFORM . FORM_NAME == self . NEXT_ACTIVE_FORM :
elif current_word and self . char_begins_new_word ( current_word , char ) :
if self . decode :
if inserted :
if "/" in spec [ "key" ] :
if index . column ( ) == Column . album :
elif "Hello0" in url and "1.2.1" in url and "v1" in url :
if hasattr ( model , "_feincms_content_models" ) :
if isinstance ( widget , RulesWidget ) :
if isinstance ( underlying_exception , urllib3 . exceptions . MaxRetryError ) :
if not request . session . shouldfail and not request . session . shouldstop :
if used_height > height - scroll_offsets_bottom :
if key . endswith ( self . cookie_suffix ) :
if isinstance ( state1_vs , list ) :
if not self . exists ( self . manifest_path ) :
if i + 1 != len ( self . name ) :
if dst . is_id ( "IRDst" ) :
if module_name :
elif m == 0 :
if count == MAXVAL :
if hkey . startswith ( k [ : - 1 ] ) :
if args . fp16 :
if txid not in self . __transactions :
if not regex . match ( d ) :
if f [ 0 ] :
if c1 and c2 :
if not isinstance ( grandchild , minidom . Element ) :
elif ch == "\t" :
if author_id == self . a1 . pk :
if stored_session :
if len ( desc ) > MAX_LINE_LENGTH :
if handler :
if relativedelta is not None :
if self . _decide_whether_to_process ( compare_id , redo , compares_done ) :
if not right . isdigit ( ) :
if s . consume_re ( _newline_esc_re ) :
if not self . isempty ( path ) :
if not os . path . isabs ( resource_store [ "base_directory" ] ) :
if not isinstance ( cur , dict ) :
if is_dev_build :
if "-" in number :
if keys not in output . keys ( ) :
if i >= len ( self . items ) :
if function . is_implemented :
if args . train :
if referreddefinition is None :
if self . _current_player :
if self . _THISFORM . FORM_NAME == self . _FORM_VISIT_LIST [ - 1 ] :
if issubclass ( field . type , ( Expression , ExpressionList ) ) :
if field . primary_key :
if idents :
if not node in lst :
if sabnzbd . filesystem . get_ext ( filename ) in VALID_ARCHIVES + VALID_NZB_FILES :
if self . result :
if remainder . startswith ( "://" ) :
if ignore_missing_dependency :
if not s :
if accumulated_reward [ i ] >= reward_bound :
if six . PY2 :
if not os . path . exists ( "/sys/block/%s/pid" % os . path . basename ( device ) ) :
if k not in keys :
if fstyle . startswith ( "%(" ) and fstyle . endswith ( ")s" ) :
if operation == "insert" :
if "|" in key :
if not execution_plan . has_step ( step_key ) :
if sort is None or isinstance ( option_value , sort ) :
if x . token_type == "quoted-string" :
if isinstance ( filename_data , list ) :
if debug_flag :
if len ( client [ "id" ] ) > 32 :
if time . time ( ) - last_updated > 10.0 :
if tree_entry . type == "tree" :
if "exp" in conf [ "properties" ] [ "attributes" ] :
if self . _allow_js_type ( tag_attrs ) :
if item is None :
if root . right :
if is_exported_python_target ( dep ) :
if np . isscalar ( a1 ) :
if Gaffer . NodeAlgo . hasUserDefault ( plug ) :
if version is not None :
if isinstance ( value , flag_value ) :
if hasattr ( self , "_context" ) :
if hasattr ( sys , "setswitchinterval" ) :
elif name . lower ( ) in self . intmap :
if len ( inst ) > count :
if ident is not None :
elif field . _name in settings :
if not private and name . startswith ( "_" ) :
if b1 != b2 :
if self . ctl :
if self . is_ignored_uri ( hyperlink . uri ) :
if hasattr ( subscriber , "_pyroRelease" ) :
if ann_obj . _read_only :
if p not in yielded :
if n_sympy >= 0 :
if geometry [ 1 ] > 90 or geometry [ 1 ] < - 90 :
if os . path . exists ( abspath ) :
if not isinstance ( l , str ) or not len ( l ) :
if d . endswith ( "old" ) :
if model_spec is not None and model_spec . HasField ( "padding_options" ) :
if self . defaultValue is not self . __optionalNotMatched :
if self . daemon . _handshake ( self . csock ) :
if su . isFirst ( innerTarget ) and su . isLast ( innerTarget ) :
if len ( set ( color_data_types ) ) > 1 :
if line_offset != 0 :
if packed is not None :
if recursive and os . path . isdir ( subp ) :
if not self . monitor_running :
if data :
if k
if self . scroll_up_rect ( ) . collidepoint ( p ) :
if not isinstance ( choice , int ) or not self . _prompt . validate_choice ( choice ) :
if integration . check_connection ( ) :
if entry is None :
if not isinstance ( inner , dict ) :
if name == "uni0402" :
if input_array is not None :
if not event . get_place_handle ( ) :
if m % 1000 == 0 :
if next_index > 100 :
if "DefaultValue" in spec :
elif self . action_input . selected_index == 1 :
if len ( l ) == 1 and isinstance ( l [ 0 ] , ( six . string_types , int ) ) :
if is_ipv6 and not HAS_IPV6_AND_DNS :
if self . state == "visual" :
if not status :
if asset . pattern :
if f and s :
if retina_path in app . env . images :
if not line :
if len ( imgs ) < 1 :
if ctg [ 0 ] == "L" and unicodedata . name ( c ) . find ( "LATIN" ) == - 1 :
if path [ : 1 ] == "/" and path [ 2 : 3 ] == ":" :
elif t == "jaconv" :
if d_total == 0 :
if kl < self . kl_target / 1.5 :
if f :
if self . resource_type . resource != constants . RESOURCE_ACTIVE_DIRECTORY :
if block [ "cidrBlock" ] == "0.0.0.0/0" :
if f . endswith ( ".pyc" ) :
if total_number == completed_number :
if i > 0 and not lines [ i - 1 ] . strip ( ) :
if hasattr ( self . _dataloader . sampler , "set_epoch" ) :
if isinstance ( dt , dgl . DGLGraph ) :
if callable ( k ) :
if binary :
if field not in structure :
if i == 0 :
if not test_session :
if args . directory :
if hasattr ( self . res2 , "Fp" ) :
elif type ( e . value ) is not list :
if self . watcher :
if not _tzinfos . has_key ( inf ) :
if _file . suffix == ".py" and _file . name not in skip_files :
if chunk :
if "elements" in element :
if key not in a :
if self . match ( target ) :
if link :
elif pos == "E" :
if os . path . isdir ( path ) :
if not verts :
if not ( self . _config . SCAN_ALL or str ( task . p_comm ) == "bash" ) :
if len ( aList ) == 2 :
if "(pofilter) " in note :
if stat . S_ISDIR ( attr [ "st_mode" ] ) :
if url . url . startswith ( explore_url ) :
if hasattr ( t , "x" ) :
if "organization_slug" in kwargs :
if dump is not None :
if precision is not None :
if self . expr2 is None :
if client . resource_groups . check_existence ( namespace . cluster_resource_group ) :
if left == 0 :
if len ( y ) != x_len :
elif node . tag_type == CLOSE_TAG :
elif issubclass ( v , Point ) and v . Attributes . dim is None :
if name in [ "cookie" , "circuit" , "upstream" , "downstream" , "stream" ] :
if fullpath [ - 1 ] in ( "/" , "\\" ) :
if not match :
if self . history_index == hist_len :
if token . kind == "lt" :
if k . isupper ( ) :
if ref in self . _editableChildren :
if type_str [ 0 ] == "i" :
if tag . getNamespace ( ) == NS_XMPP_STREAMS :
if name not in configdata . DATA :
if check is None or isinstance ( check , basestring ) :
if isinstance ( v , list ) :
if url . endswith ( "ping" ) and self . _first_ping :
if not data :
if tld in tlds :
if len ( text ) == 0 :
if line :
if key in statement :
if self . use_label_encoder :
if event_type is False :
if value and "@" in value :
elif not IfList :
if m :
if self . PALETTE is None :
if isinstance ( child , pytree . Leaf ) and child . value == "*" :
if cls . use_origin :
if token == "" :
if cls . IS_POLYAXON_DIR :
elif size <= 3 :
if item . endswith ( "/" ) :
if content :
if not batch :
if d != d2 :
if fields == None or not len ( fields ) == 2 or fields [ 0 ] [ 0 : 1 ] != b":" :
if self . symbolic :
if self . autoSaveSettings or force :
if genename_element . attrib [ "type" ] == "primary" :
if line . startswith ( "Metadata-Version: " ) :
if self . _exception is None :
if dbci is None :
if "\n" in text :
if msg . get_attr ( "IFLA_IFNAME" ) == "test1984" :
if name in self . features :
if _PYPI not in indexes :
if entry and entry [ "name" ] . lower ( ) == self . qualify ( name , domain ) . lower ( ) :
if ( y & mask ) != 0 :
if flag :
if self . _scan_error_cache is None :
if self . _cls_query :
if self . HasPinButton ( ) :
if e . errno == errno . ENODEV :
if padsize :
if not fn . endswith ( ".yaml" ) :
if visible :
if self . value ( ) is self :
if hasattr ( key , "text" ) :
if not scheme or scheme in ACCEPTABLE_URI_SCHEMES :
if self . options . compression_enabled :
if re . match ( r"^(\d+)$" , x ) :
if sys . version > "3" :
elif start :
if name . split ( "." ) [ - 1 ] == "weight" and "layer_norm" not in name :
if namespace . name is None :
if document_id in self . _documents :
if numeric :
if self . max_samples_for_vocab and ( i + 1 ) >= self . max_samples_for_vocab :
if config is False :
if cap :
if mode == "start" :
if created :
if driver :
if len ( used ) == 0 :
if not is_iterable ( value ) :
if value is not None :
if self . _process . poll ( ) is not None :
if resultset [ "result" ] :
elif min != - 1 and spaces < min :
if 0 not in data :
elif isinstance ( val , MutableMapping ) :
if chunk == b"" :
if not dep_cnts :
if type ( e ) is Argument or type ( e ) is Option and e . argcount :
if options . name and not options . name in filter_name :
if not b1 :
if not father_handle :
if 96 < n < 123 :
if composite_file . optional :
if isinstance ( v , Config ) :
if vm_securitygroups [ i ] not in securitygroups :
if prepare :
if "-" in rowid :
if ( w , pos ) in self . composite_dict :
if box == self . level . bounds :
if size > max_size :
if body :
if self . total_volumes [ self . cur_setname ] >= self . cur_volume and self . cur_volume :
if self . wdaymask [ i ] == self . rrule . _wkst :
if wait :
if not isinstance ( y , ( dict , OrderedDict ) ) :
if forum . num_topics :
elif isinstance ( node , addnodes . start_of_file ) :
if self . locations and machine . location in self . locations :
elif value not in ( False , None ) :
if level and ( not elem . tail or not elem . tail . strip ( ) ) :
if e . response [ "Error" ] [ "Code" ] == "IncorrectInstanceState" :
if fish is bomb :
if lw == 0 :
if value == { "$type" : "timestamp" } :
if not data :
if isinstance ( item , ( ItemProcessor , dict ) ) :
if fields_key in node_specific_config :
if comment is not None :
if case ( 0 ) :
elif isinstance ( value , datetime . datetime ) :
if not psycopg2 :
if timeout >= 0 :
if plugin . is_activated :
if version_mapping [ "number" ] > self . server_information [ "server_version" ] :
if not isinstance ( key , ( bytes , str ) ) or not isinstance ( value , ( bytes , str ) ) :
if "b" in prefix and not self . vm . PY2 :
if left_base in self . FIELDS :
if n >= 0 :
if nbChars [ 0 ] is not None :
if duration > 0.1 :
if part :
if not hasattr ( val , "__len__" ) :
if type ( level ) != types . IntType :
if p . grad is None :
if lupa . lua_type ( value ) == "table" :
if "(" in self . args :
if j != - 1 :
if key in analyzer . attr_docs :
if ( x & mask ) != 0 :
if i >= 99 :
if not output_files :
if "summarize" in task . name :
if breq :
if isinstance ( ns , SimState ) :
if symbol_id in _id_to_symbol :
if mod_type == imp . PY_SOURCE :
if not findall :
if process_space :
elif c == "\\" and s [ i + 1 ] == "$" :
if os . path . exists ( src ) :
if f in formats :
if os . path . exists ( "file_sources.json" ) :
if len ( x ) > len ( y ) :
if newdata :
if len ( activities [ "data" ] ) < 300 :
if self . att_name not in instance . _obj_cache :
if playlist :
if name . startswith ( "refs/heads/" ) :
if x == b"" :
if s . isspace ( ) :
if "_create_temporary" in traceback . format_exc ( ) :
if act [ "type" ] == "SubProcess" :
if user and user . banned :
elif v in self . _definition :
if hasattr ( learner , "inference_cache_" ) :
if all ( isinstance ( expr , basestring ) for expr in exprs ) :
if back :
if ownerid in self . _storage :
if not rest :
if column . name in [ "keypoints" , "bounding_boxes" , "polygons" , "line_strings" ] :
if self . is_pointer == 1 :
if os . path . isfile ( file ) or os . path . islink ( file ) :
if USE_DEBUG :
if attrname == "salt_version" :
if isinstance ( auxiliary_head , list ) :
if param . type :
if obj is not None :
if subtitle_url :
if not ignore_first_level :
if not os . path . exists ( curr_path ) :
elif "Permission denied" in getUnicode ( ex ) :
if isinstance ( part , Element ) :
elif default . lower ( ) == "false" :
if doAST :
if idx :
if dialog . run ( ) != Gtk . ResponseType . YES :
if place_title == place_name :
if isinstance ( constraint_data , LinearCanonicalRepn ) :
if i < len ( data ) and i > - 1 :
if b"PYTHONCASEOK" not in _bootstrap . _os . environ :
if self . field_spec_ is None :
if rt . reduced_QMARK_ ( init ) :
if text . startswith ( event . data . lower ( ) ) :
if getuid ( ) == 0 :
if module_name in dependencies :
if self . encryptor :
if self . predicate ( subobj , context ) :
if group_ids . intersection ( user_groups ) :
if field :
if not mother_handle :
if isinstance ( m , nn . BatchNorm3d ) :
if step_num < hparams . lrn_step :
elif is_small_integer ( token ) :
if restr == { "essential" : True } :
if len ( self . _filters ) != filter_nb :
if path . isfile ( config_path ) :
if type ( value ) == PhoneNumber :
if quotation :
if hints_length > 0 :
if self . tags and self . _tags_match ( machine . tags , self . tags ) :
if comp . destroy_id in comp_ids :
elif "status" in line :
if not os . path . exists ( keypath ) :
elif self . op == "*" :
if - delta < real . get_float_value ( ) < delta :
if file_sources_as_dict is not None :
if tag . has_sort :
if not key in self . options :
if stride > output_stride :
elif is_iterable ( value ) :
if i == 0 :
if name [ : 2 ] == "__" and name [ - 2 : ] == "__" :
if threading . current_thread ( ) . name != "MainThread" :
if not self . editing :
if not isinstance ( dep . repo , WarehouseBaseRepo ) :
if name [ : 1 ] == "_" :
if attr == "choices" :
if x not in fan_out :
if rendered_children :
if ret_code == errno . EAGAIN :
elif fid == 2 :
if len ( V ) != d - R . dim ( ) or ( R + V ) . dim ( ) != d :
if isinstance ( value , list ) :
if received >= 100 :
if provider . get_access_key ( ) is None or provider . get_secret_key ( ) is None :
elif a == b :
if weight == 2 :
if val :
if delta < 0 :
if evname != args [ 0 ] :
if raw_input ( ) . lower ( ) == "y" :
elif requested_namespace [ 0 ] not in IGNORE_DBS :
if saved_exception :
if target == type :
if reply == "!done" :
if len ( self . _remaining_block ) == 0 :
if not globally :
if j == sys . maxint :
if prev_memory != curr_memory :
if fname not in self . _flags :
if interface_version == version and interface == self :
if not text . startswith ( "gtk-" ) :
if os . path . islink ( dirpath ) :
if lang_data [ 0 ] :
if not self . layout . itemAt ( row , col ) :
if isinstance ( prev_ , sql . TokenList ) :
if read_len < len ( var ) :
if not retry :
if len ( f"{current_line} {word}" ) > max_per_line :
if matched :
if size is not None :
if match is None :
elif os . path . isdir ( file ) :
if self . ns . fail_env_changed and self . environment_changed :
if not ( "<" in line or line in dep ) :
if name is not None :
if self . _edgepaths :
if len ( data ) == 0 :
if self . share_input_output_embed :
if template is None :
if hasattr ( x , "device_discovered" ) :
if "encoding" in new_kwargs :
if self . _lock > 0 :
if name . endswith ( ".sccprofile" ) :
if not self . _eval_todo :
if not cmd . check ( f"docker check for {self.path.k8s}" ) :
if d == 0 :
if isinstance ( val , dict ) :
if ctx_params :
if self . request . is_ajax ( ) :
if "<" in text :
if not everythingIsUnicode ( v ) :
if self . partial and isinstance ( self . parent , EventsMixin ) :
if data is None :
if old in body :
if not has_decimal_places :
if path_obj . has_suggestions ( ) :
if key_data . get ( key ) :
if not isinstance ( root_objs , Iterable ) :
if len ( def_files ) == 1 :
if not len ( image . get ( "caption" , "" ) ) <= 180 :
if not isinstance ( target_type , list ) :
if key not in value1 [ group ] :
if k not in query :
if handler . __self__ is self :
if values [ - 1 ] == uri and name . startswith ( prefix ) :
if self . scan_attr ( attr ) :
if x != i - size :
if msg :
if len ( root ) > 0 :
if isinstance ( other , CTypesGenericPrimitive ) :
if label is not None :
if sys . version_info [ 0 ] < 3 :
if k == "server.socket_host" and v == "localhost" :
if isinstance ( self [ i ] , str ) and self . _list [ i ] in filenames :
if "generate_java" in dep . attr :
if "episode" in result :
if not os . path . exists ( replica . error_file ) :
if name != "main" :
if extension in file_extensions :
if ( line [ idx : len ( comment ) + idx ] ) . lower ( ) == comment . lower ( ) :
if cell [ "cell_type" ] == "code" :
if self . _storage . gzip and self . obj . content_encoding == "gzip" :
if ":" in f_str :
if "," in orig_text :
if name . endswith ( ".py" ) :
if self . source in CLOUD_PROVIDERS :
if ( not unquoted_label ) or ( unquoted_label . end ( ) < len ( label ) ) :
if source == self . ARGUMENT_SOURCE :
if os . path . isfile ( path ) :
if node_ . key == key :
if not source_path . is_dir ( ) :
if isinstance ( value , types . FunctionType ) and hasattr ( value , "unittest" ) :
if layer is not None :
if len ( self . _tail_data ) == self . _base_number :
if answer == Gtk . ResponseType . NO :
if record [ "ttl" ] != ttl :
if callable ( cleanup ) :
if data_of_birth_string . count ( "/" ) != 1 :
if lib in core :
if period_since_last_check >= server_check_period :
if "outputs" in self . tasks_dictionary [ task [ "body" ] [ var ] [ "task" ] ] :
if parent_node . type == "Const" :
if "requires" in data :
if delete :
if batch in names :
if self . split <= self . min or self . split >= self . max :
if head is None :
if not isinstance ( data , str ) :
if os . path . exists ( "/etc/mysql/conf.d/my.cnf" ) :
if src . exists ( ) :
if y not in self . _buffer :
if ak not in res :
if dest_val == baseline_val :
if isinstance ( data , str ) :
if field_name == "id" :
if image . _masks :
if getattr ( i , "__self__" , None ) != listener
if code == TERMINATE :
if frac > 1 :
elif i == "]" :
if prototype == ( "attr" , [ "ident" ] ) :
elif self . current_provider . kind == directory . Provider . PROVIDER_URL :
if self . h . plugin_handle ( plugin ) :
if k == "p" :
if s . identifier in required :
if isinstance ( getattr ( module , x , None ) , types . ModuleType ) :
if isinstance ( r , bytes ) :
if not source . can_shuffle ( ) :
if self . column != - 1 :
if len ( line . strip ( ) ) == 0 :
if self . index < self . length and isHexDigit ( self . source [ self . index ] ) :
if table_size == 0 :
if is_windows_drive :
if self . mo is not None and self . debug >= 5 :
if explicit :
if self . flags . f_contiguous :
if "seccomp.security.alpha.kubernetes.io/defaultProfileName" in key :
elif cm . unraisable is not None :
if frame . f_trace is None :
if type ( b ) == str :
if peer . bad :
if self . headless_active :
if variables_name_written_in_proxy :
if name not in found_names :
if not name [ 0 ] . isupper ( ) :
if moduleID == active :
if c != "\r" :
if self . _chat_ids :
elif isinstance ( elem , int ) :
if "var" in mem and "source" in mem :
if self . bitnum == 8 :
if isinstance ( parameter_range_value , list ) :
if self . featureA in feature_set . features . values ( ) :
if os . path . isdir ( full_name ) :
if self . _ipc_requests . empty ( ) :
if not d :
if self . _net_none :
if delta > self . duration :
if name in butnot :
if len ( items ) > 2 :
if self . squeeze_dims [ i ] :
if auto :
if not data :
elif isinstance ( arg , str ) :
if "." in element :
if isinstance ( value , int ) :
if i == true_axis :
if value . startswith ( prefix ) :
if random_state is not None :
if module_identifier not in impls :
if shapes [ i ] is not None :
if c_date == ak [ "CreateDate" ] :
if kw . arg == "script_mode" :
if entity_ref not in statuses_by_refs :
if prefix :
if att not in common_attributes :
if isinstance ( msg , tuple ) and msg [ 0 ] == "" :
if not exists :
if _lt is _NegationExpression or ( _lt in native_numeric_types and _l < 0 ) :
if is_tuple :
if "denied" in data [ "error" ] or "cancelled" in data [ "error" ] :
elif char == " " :
if req . headers . get ( self . auth_header , None ) == auth_val :
if os . path . exists ( sockname ) :
if nurbs is None :
if await self . notify ( "check_if_normal_room" , i [ 0 ] , - 1 ) :
if ps_id not in ps_vars :
if "do_build" not in name and "do_populate_sdk" not in name :
if 0 :
if ( not task_types or task [ "type" ] . lower ( ) in task_types )
if vector :
if result == ExportResult . FAILED_RETRYABLE :
if "(hex)" in line :
if remainder :
if lk . startswith ( "x-amz-" ) :
elif message is None :
if self . pythonexe != sys . executable :
if not self . _displayed :
if self . _binaryOperationBinders . ContainsKey ( op ) :
if value is None :
if self . send_queue is not None :
if eline not in rline :
if isinstance ( m , nn . ConvTranspose2d ) :
if k . startswith ( field_name + "__" ) :
if not self . _cancelled and not self . _final and self . _previous_context_id :
if level_ref < 0 :
if node . _alias :
if key . endswith ( "_id" ) :
if tt == 0 :
if i_type [ 0 : 3 ] == "cce" :
if i > 0 :
elif key in ( "TAI64N" , "{^LN-BEG}TAI64N" , "^TAI64N" ) :
if xx . ndim == 2 :
if "." in pn :
if c . editCommands . autojustify :
if token . token_type == TOKEN_TEXT :
if operation [ "type" ] == "resize" :
if self . data [ "match" ] == "denied" :
if model_class in MODEL_MAPPING . values ( ) :
if self . arch == "i386" :
if size == 0 :
if key in seen :
if self . strict > 1 :
if sle . dependant_sle_voucher_detail_no :
if self . stop_lat > 90 or self . stop_lat < - 90 :
if k in self . combinations :
elif include_remainder :
elif hasattr ( layout_object , "get_field_names" ) :
if key in ( "EPOCH" , "{^LN-BEG}EPOCH" , "^EPOCH" ) :
if self . isViewController ( object ) :
if not isinstance ( i , int ) :
if not os . access ( path , os . X_OK ) :
if section in schemaparser . sections ( ) :
if args . cpu_trainers > num_cpus :
elif magic == MMapIndexedDataset . Index . _HDR_MAGIC [ : 8 ] :
if obj [ "id" ] :
if ins <= progress or ins >= len ( s ) :
if project . readme . markup != "rst" :
if "error_list" in response_json :
if self . _it is None :
if found < 0 :
if result :
elif st == 1 :
elif nm . endswith ( ".py" ) :
if root == last_root :
elif p . h . startswith ( "@mark-for-unit-tests" ) :
if self . tree . openElements [ 1 ] . parent :
if len ( i ) == 0 :
if not self . _config . PHYSICAL_OFFSET :
if len ( num_bits ) == 3 :
if os . path . exists ( filename ) :
if line . lstrip ( ) . startswith ( searchfor . lstrip ( ) )
if win . Class ( ) != "ComboBox" or win . ref . Class ( ) != "ComboBox" :
if start < last_end :
if not gzip :
if user . name :
if name is None :
if self . map [ row ] [ col ] == UNSEEN :
if input_array is None :
if season == scene_season :
if os . path . islink ( path ) or os . path . isfile ( path ) :
if result [ "jobComplete" ] :
if element . kdims :
if new_time :
if name . endswith ( ".py" ) :
if reset == ACTIVE_LOW :
if k in negate :
if self . named_windows [ wnd_name ] == 0 :
elif permission_result == PermissionResult . PERMITTED :
if ( datetime . now ( ) - limit ) > value :
if src == current_case . get ( "src" ) :
if fun in [ "nms" , "softnms" ] :
if action :
if callable ( source ) :
if self . skip_connections and x . size ( 1 ) == residual . size ( 1 ) :
if token . startswith ( prefix ) and len ( token ) > 5 :
elif isinstance ( s , collections . abc . Sequence ) and len ( s ) == 0 :
if not batch :
if self . base . conf . strict :
if ( table_name , attname ) in self . new_db_fields :
if source != self . source . read ( ) :
if not component :
if k < len ( selected ) :
if self . filename :
if len ( auth ) == 2 :
if s in path :
if codepoint != 34 :
if self . _signature_excluded ( self . signature ) :
if cls . run_create_tables == "once" :
if not os . path . isdir ( base ) :
if follow_field :
if _hook_data is not None :
if crop :
if line . startswith ( "ERROR:" ) and prev_line and prev_line . startswith ( "=" ) :
if inverted_nsmap is not None and namespace in inverted_nsmap :
elif isinstance ( value , basestring ) :
if skipped :
if not view . id ( ) in active_views :
if line . startswith ( u ( "Skipping" ) ) :
elif fn . endswith ( ".md" ) :
if ts . processed_reward is not None :
if encoding is not None :
if not credentails :
if self . node_ids :
elif case ( 3 , 4 ) :
if not self . _unfinished_tasks . acquire ( False ) :
if pwd is None :
if exe_data is not None :
if not isinstance ( vcs , ( list , tuple ) ) :
if self . request . method in ( "GET" , "HEAD" ) :
if not line . strip ( ) :
if handle :
if len ( input ) > 1 :
if not isinstance ( self . momentum , ( int , float ) ) :
if ( first_char == 202 ) and ( 0x9F <= second_char <= 0xF1 ) :
if msg :
if key not in valid_keys :
if fit is None :
if filter is None or ( row , col ) not in filter :
if eager is None :
if count :
if timeout is None :
if key == index [ 0 ] :
if sql_list :
if stmt . op == ":=" and not stmt . var in self . variables :
if self . compile :
if enable :
if a . _version != b . _version :
if fnmatch . fnmatch ( match , item . strip ( "/" ) ) :
if c == "\0" :
if len ( payload ) != self . DATALEN :
if d in [ "." , ".." ] :
if suffix not in self . suffixes and os . path . isdir ( path ) :
if isinstance ( value , _ModuleMarker ) :
if not check_global_interrupt ( ) :
if info [ "regex" ] . search ( " %s" % offset_or_timezone_abb ) :
if os . path . exists ( path ) :
if any ( x == process_name for x in match_strings ) :
if ":" in authority :
if BrowserContext . _BROWSER_REFCNT == 0 :
if tick . order_book_id not in order_book_id_list :
if ss [ "branch" ] :
if f :
if chan in r :
if retval :
if ticker_ticks . get ( tick [ "T" ] ) :
if isinstance ( v , list ) :
if not tp or name in [ "default" , "null" ] :
if vt . replacement is not None :
if linkcount > 2 :
if "-k %s" in self . inputs . op_string :
if self . helper_text_mode == "persistent" :
if isinstance ( item [ - 1 ] , dict ) :
if arguments :
if d . is_fixed_asset :
if nbChars [ 1 ] is not None :
if name in self . _HIGH_LEVEL_SERVICE_FULL_NAMES :
if p + 1 == self . get_ptr ( ) :
if self . expect_exception :
if image_source :
if parent is not None and parent . get_kind ( ) == "Class" :
if self . roundtriptest :
if first_variant :
if not isinstance ( raw_data , text_type ) :
if not emoji :
if hasattr ( self . group , value ) :
if self [ - 1 ] . token_type == "cfws" or self [ - 1 ] [ - 1 ] . token_type == "cfws" :
elif volume_guid_path :
if parsed_drawing :
elif k is None :
if callable ( _on_found ) :
if not PYTHON3 :
if node_id in self . cached_nodes :
if self . opHash . has_key ( tval ) :
elif not is_training and self . _infer_helper is None :
if self . _properties [ "ldset_name" ] not in ldsets :
if abs ( z [ i ] ) > 2.0 :
if isinstance ( inst , ( _Block , _Instantiator ) ) :
if len ( bucket ) == batch_size :
if isinstance ( tensor . op , tvm . te . ComputeOp ) :
if run_id in self . _run_id_dict :
if self . _CheckMySQLConnection ( ) :
if not topics or topic not in topics :
if "on_demand" in keywords :
if register :
if ref in item :
if activeBtns :
if config . resolver_timeout :
if first . tag == "p" and first . text is not None :
if locale [ : 2 ] == ( "en" ) and locale [ : 5 ] != "en_US" :
if hasattr ( g . app . gui , "set_minibuffer_label" ) :
elif su . isFirst ( innerTarget ) :
if status . get ( "status" ) == "ENDED" :
if isinstance ( text , CodeViewText ) :
if not frappe . db . exists ( self . party_type , self . party ) :
if i % 2 :
if c == "$" and s [ i + 1 ] in "0123456789" :
if r . status_code >= 400 :
if len ( items ) > 1 :
if shutting_down . is_set ( ) :
if "BEGIN RSA PRIVATE KEY" in s or "BEGIN PRIVATE KEY" in s :
if k not in "id" and obj1 . get ( k ) :
if user_favourite_event is not None :
if self . _signal_handlers :
if not self . verbose :
if self . auth_manager . CheckPermissions ( username , router_id ) :
if charset :
if self . count == self . epiLen / 2 + 1 :
if sfile . endswith ( suffix ) :
elif a . type == "malware-sample" :
if event :
if value is None :
if len ( view . get_regions ( linter ) ) :
if not mperms & MM_READ :
if isinstance ( p1 , ( list , tuple ) ) :
elif isfile ( path ) and path . endswith ( ".csv" ) :
if not isinstance ( inst , ( _Block , _Instantiator , Cosimulation ) ) :
if sys . version_info >= ( 3 , 0 ) :
if profile != "default" :
elif gold_spans [ gi ] . start < system_spans [ si ] . start :
if tag not in SUPPORTED :
if self . type == USER_TO_USER :
if self . current_provider . kind == directory . Provider . PROVIDER_SEARCH :
elif typ == "em" :
if f . exception ( ) :
if not settings . USE_TZ :
if "=" in each :
if isinstance ( value , basestring ) :
if not c in tags :
if not ( i + 1 ) % boxes_per_row :
if this_date < oldest_date :
if p . returncode != 0 :
if isinstance ( v , list ) :
if num > 1 :
if new_parameter . name == "" :
if self . server :
if verbose :
if k [ - 3 : ] == "_at" :
if line [ 0 : 5 ] == "GN   " :
if value . startswith ( "/" ) and not "\n" in value and value not in dirvars :
if not self . _COMMENT_WITH_TIMESTAMP_RE . match ( lines [ 0 ] ) :
if name is None :
if path in l2 :
if os . path . exists ( fn ) :
if patching . attribute_name is not None :
if k == neighbors . ENABLED :
if len ( v . keys ( ) ) == 1 :
if handler_id not in used_handlers :
if self . _args . host and self . _args . host == machine . name :
if self . add_target ( target ) :
if "OpenCensus" in md . name and suffix in md . name :
if c == curr :
if feature :
if PY2 :
if not safe :
elif type == "v" :
if not exists ( folder ) :
if node_type not in self . available_node_types :
if isinstance ( val , cst . Subscript ) :
if download == self . __current_download :
if account . discriminator == "gmailaccount" :
if tb :
if self . label is not None :
if rd :
if formatstring == "w:xz" :
if key in txn . _protected_keys :
if tt == 10 :
if x :
if not os . path . exists ( full_path ) :
if "init" not in item . keywords :
if not isinstance ( x , ( int , type ( None ) ) ) :
if left == field_name and len ( right ) > 0 :
if attribute . required :
if len ( strbuf ) + len ( s ) < STRBUF_LIMIT :
if namespace . by_subscription is not None :
if labels_to_remove :
if "The volume was not found on this system." in ex . args :
if total_processed % 1000 == 0 :
if self . counter == self . count :
if cls . _instance is None :
if state not in ( Gst . State . PLAYING , Gst . State . PAUSED ) :
if imdb_id :
if self . http_client . configured_class != SimpleAsyncHTTPClient :
if ds :
if view . size ( ) > 6 and view . substr ( sublime . Region ( 0 , 6 ) ) . lower ( ) == "search" :
if text_span == tok_answer_text :
if tt == 10 :
if "resourcegroup" not in [ x . lower ( ) for x in obj . keys ( ) ] :
if build_data . built ( dpath ) :
if entry . style == "long" :
if line . startswith ( '"""' ) :
if e . no_match_group_specs or e . error_group_specs :
elif size <= 9 :
if not self . is_ignored ( line ) :
if mod > 0 :
if param . desc and "" . join ( param . desc ) . strip ( ) :
if unit . is_translated ( ) :
if self . script_running and self . script_running [ 1 ] == name :
if not isinstance ( possible_dict , dict ) or "value" not in possible_dict :
if visitmethod is not None :
if found and found not in seen :
if "X" in to_test :
if len ( attribute ) > 0 :
if not md :
if int ( decode . config . currentProfile ( ) ) > 1 :
if code . co_argcount == 2 :
if tokentype != "id" :
if INTERNAL_DISK_CONFIG in metadata :
if val == "<bool>True" :
if url_infos . get ( url , url_info ) != url_info :
if inspect . isfunction ( function ) :
if hasattr ( socket , "SO_REUSEPORT" ) :
if isinstance ( item , ParseResults ) :
if tok == "*" and ntok == "/" :
if c2 :
if dist >= 0 and ( min_dist < 0 or dist < min_dist ) :
if empty_self or empty_other :
if not c_size :
if self . deferred :
if name not in subst :
if isinstance ( element , Container ) :
if func_name . startswith ( "_" ) :
if o . vars [ i ] :
elif isinstance ( i , _bytes ) :
elif isinstance ( inst , dict ) :
if not quiet :
if name not in self . image_name :
if token . endswith ( suffix ) and len ( token ) >= 5 :
if match is not None :
if hasattr ( widget , "scriptNode" ) :
if not event_field :
if not self_log and b [ "Name" ] . startswith ( "cf-templates-" ) :
if log_function is not None :
if k == "full_title" :
if current_time - start_time > self . timeout :
if cs . word . startswith ( "~" ) :
if button == Qt . BackButton :
elif isinstance ( m , nn . LayerNorm ) :
if j . startswith ( "scalding-core-" ) :
if not os . path . exists ( full_directory_path ) :
if mod == "input" :
elif item [ 1 ] :
elif ex == 500 :
if int_id < len ( self . _vocab_list ) :
if not ask ( contest ) :
if self . expr3 is None :
if self . pendings and ( len ( self . pendings ) > self . bufmax ) :
if self . _missing_values :
if self . min_radius <= self . center . distance ( ( x , y ) ) <= self . max_radius :
if "type" in genename_element . attrib :
elif i == iFirstCurve :
if version :
if not os . path . exists ( checkpath ) :
if not tags :
if self . compare_entries ( compare_entry , compare_base ) :
if self . stream . readBytes ( addr , 2 ) != ">>" :
if isinstance ( child , pytree . Leaf ) and child . value == "and" :
if columns is None :
if formatter is not None :
if job_id in _stash . runtime . worker_registry :
elif type ( self . choices ) not in ( types . TupleType , types . ListType ) :
if os . access ( srcpath , os . X_OK ) :
if x != int ( x ) :
if size > 0 :
if form . is_valid ( ) :
if not has_headers :
if OpenStackVirtualMachine . command_works :
if not success :
elif r :
if has_xml > 0 :
if self . direction == "start" :
if layer in layer_names :
if self . beExtremelyLenient :
if not comment :
if type ( policy ) == FormPolicy :
if user_input is not False :
if gallery [ "name" ] == DEFAULT_GALLERY :
if filters . get ( "publish_year" ) :
elif name == "mean_module.constant" :
if len ( input_shape ) == 4 :
if targets :
elif hasattr ( json_api_settings , setting ) :
elif hasattr ( self . metadata , attrname ) :
if dline [ "path" ] == f"{path}/{name}" :
if not result [ "filename" ] . find ( "." ) > - 1 :
if not self . header_rgx . match ( child . tag ) and child . tag not in [ "pre" , "code" ] :
if is_all_match :
if any ( c . key not in chunk_result for c in tiled_n . chunks ) :
if o . selected :
if not self . check_token ( FlowEntryToken , FlowSequenceEndToken ) :
if key == "node" :
if n [ "port" ] not in lldp . keys ( ) :
if venv == current_env :
elif list ( config . keys ( ) ) == [ "$file" ] :
if len ( buf ) < num_as * two_byte_as_size :
if not newParent . _element . text :
elif definition . name and definition . name . value == operation_name :
if - 1024 < item < 1024 :
if reverseConn not in cmd :
if job_entry :
if request_uri . startswith ( script_name ) :
if "Document" in policy and "Statement" in policy [ "Document" ] :
if tt == 0 :
if human_readable :
if bbox is None :
elif k . start is None :
if self . predicate ( subobj , context ) :
if self . model_portion == "whole_featurizer" :
if self . interrupted ( ) :
if now > next_reminder :
if not exists ( init_path ) :
if isinstance ( leaf , Integer ) :
if new . is_ident ( ) :
elif doctype . startswith ( "xhtml" ) :
if ex_obj is not None :
if not testv_compare ( data , operator , specimen ) :
if self . thread . request . user . is_authenticated :
if size :
if value and not isinstance ( value , int ) :
if self . error ( ) is None :
if name in self . node_filters [ "exclude_nodes" ] :
if file . endswith ( ".gwt.xml" ) :
if not read :
if s . a < s . b :
if not isinstance ( rjson , dict ) :
if p . cexpr . x == child :
if any ( x not in tag for x in special_feats ) :
if wildcard_count == 1 and argument [ 0 ] . endswith ( "*" ) :
if len ( entries ) != 0 :
if hasattr ( libcrypto , "EVP_CIPHER_CTX_cleanup" ) :
if int ( tIdx ) >= idx :
if user is None :
if self . backend_rpcserver :
if menuentry . Add == True :
if mod not in self . disabled_modules :
if r is None :
if tag == "@menu" :
if suffix . import_enabled ( ) is True :
if os . path . islink ( checkpath ) :
if isinstance ( fstyle , basestring ) :
if key == "CI_KEEP_ALIVE" :
if isinstance ( fn , str ) :
if not status :
if f != 0 :
if not ( 0 <= level_ref < len ( levels ) ) :
if bool ( where ( v ) ) != complement :
if sleep is not None :
if i % args . sample_every == 0 and i > 0 :
if new_response :
if scan_argv ( self . argv , option ) is not None :
if unit . isheader ( ) :
if row_id . table :
if self . pin . pull != pull :
if executed :
if type in self . __proxy_properties__ :
if not isinstance ( json . loads ( namespace . pull_secret ) , dict ) :
elif type == "s" :
if os . path . exists ( self . path ) :
if not request :
if not part . is_attachment :
if line . startswith ( u ( "- " ) ) :
if API_CACHE is None :
if printElemNumber :
if supports_group ( x , nl ) :
if not order_item . canceled :
if key in self . tagged_blocks :
if num_results == max_items :
if ( opt . deprecate_by or opt . remove_by ) and getattr ( source , name , None ) :
if self . server :
if subscriber . is_listening ( ) :
if len ( line ) == 2 :
if a is None :
if type ( ah ) is not ActionHandle :
if self . _current_param :
if cls_key == search_key :
if sibling . getFirstChild ( ) :
if i < 2 :
if item . endswith ( "/" ) and not is_dir :
if division in "\n" . join ( lines ) :
if build_data . built ( dpath ) :
if len ( col ) == 6 :
if type ( subElem ) != str :
if "dse_dir" in data :
if os . path . islink ( path ) or os . path . isfile ( path ) :
if test_support . verbose :
if self . _filename is not None :
if extra_action_out_fn :
if id ( fval ) in inv_bindings :
if dep . repo is None :
if detyper is None :
if self . _should_delete :
if all ( c in string . printable for c in container ) and os . path . exists ( container ) :
if self . previous_party and ( self . previous_party != row . party ) :
if val is not None :
if param in facts [ role ] :
if self . do_corr_and_slope :
if not isinstance ( self . _access_modes , list ) :
if data [ "items" ] :
if isinstance ( result , tuple )
if self . dialog_widget . add_to_channel_checkbox . isChecked ( ) :
if getattr ( self , var_name , None ) == self . default_config [ var_name ] :
if key in kwarg :
if self . training and effnet_cfg . EN . DC_RATIO > 0.0 :
if index == user_input :
if not self . futuresAllowed :
if isinstance ( data , ( list , tuple ) ) :
if status and status == StatusSet . SUCCESS :
if src_root != src_dir :
if not _is_text_data ( hparams_i [ "data_type" ] ) :
if isinstance ( v , dict ) :
if isinstance ( value , list ) :
if filename . endswith ( filetype ) :
if device . site != self . cluster . site :
if disable_gc :
if any ( isinstance ( e , And ) for e in self . exprs ) :
if ( path / fname ) . exists ( ) :
if glyph . contours [ i ] . segments [ j ] . type == "line" :
if not self . Parse ( other . message_class ) :
if os . path . isfile ( file ) :
if strip :
if value is None :
if var . get ( u"t" ) . callprop ( u"isVariableDeclarator" , var . get ( u"parent" ) ) :
if not isinstance ( n , _strtypes ) :
if enc is None :
if converted is None :
if idx != self . _curidx :
if not self . image_pointer :
elif operator == "Count" :
if postprocess is not None :
if idle . is_set ( ) :
if len ( analyser . allocate_clusters ( 0.1 ) ) == 2 :
if len ( buf ) :
elif isinstance ( elt , str ) :
if user . invited_as == 2 :
if line . startswith ( ">>END" ) :
if text [ - 1 ] not in "\n\x85\u2028\u2029" :
if not os . environ . get ( "GALAXY_TEST_AMQP_INTERNAL_CONNECTION" ) :
if render and t % 3 == 0 :
if path in sub and not sub [ path ] . startswith ( "[git]" ) :
if object_name == "Image" and ( feature . startswith ( C_FILE_NAME ) ) :
if fname . endswith ( ".py" ) :
if self . watchdirs [ watchdir_id ] [ "enabled" ] :
if kernel_size [ i ] == - 1 :
if match :
if getattr ( t , "__origin__" , "" ) is Union :
if ct in JSON_CONTENT_TYPES :
if abs_path :
if not isinstance ( val , FeatStruct ) :
elif s . type in ( "suite" , "decorated" ) :
if not self . _send_confirm :
if extracted :
elif stat . S_ISLNK ( n . mode ) :
if self . path . count ( cross_node ) > 1 :
if str_in [ pos ] == start_tag :
if self . _data [ 0 ] is None :
if e . get_dbus_name ( ) == DBUS_NO_SUCH_OBJECT :
if expression . remove_me == True :
if char == ">" :
if target_path_attr :
if user is not None :
if out . endswith ( "1" ) :
if variant == "tracks" :
if "point" not in node . attr [ "shape" ] :
if msg . message_type == message_type
if reg . reg in ( "PC" , "R15" ) :
if "movie_hdr" in field :
if remote_version > local_version :
if i >= 0 and i < len ( selections ) :
if product_yaml_path is not None :
elif len ( self . flat_conditions ) == 0 :
if not len ( scene_exception ) == 2 :
if idx >= len ( selections ) :
if ":" not in path_or_uri_like :
if i . objectName ( ) == "MainWindow" :
if key not in account_dict [ "entities" ] [ "media_player" ] :
if isinstance ( val , bool ) :
if flags != 0 :
if dep_cnt :
elif is_dict . match ( item ) :
if schema . IsNumeric ( col ) :
if other is region :
if scalar :
if tt == 0 :
if face . inners and face . outer :
if anime . get ( x , False ) == x_value :
elif merge_if_exists :
if not label or len ( label ) == 0 or label == "" :
if not ua :
if i in direct_upstreams :
if letter == "<" :
if spec . has_location :
if not result :
if hasattr ( sys , "getswitchinterval" ) :
if quota_holder not in self . _settlement_manager_id :
if previous_echoed . endswith ( "foo1" ) :
if snapshot . cluster . cluster_identifier == cluster_identifier :
if hasattr ( model , "edit_handler" ) :
if exit_code < 0 :
if l [ 0 ] == "Filename" :
if self . config [ "nocopy" ] :
if prevout in utxos :
if self . wait ( timeout = 0.1 ) is None :
if "s" in thisDynamic :
if name in self . values :
if dictionary . path in paths :
if isinstance ( key , ( int , long ) ) :
if len ( all_items ) < target :
if seq_file and os . path . exists ( seq_file ) :
if name in self . funcs :
if not package_directory . startswith ( seen_package_directories ) :
if conf_file :
if self . checks_passed >= self . number_of_checks :
if name == "Index" :
if warning_header_value is not None :
if not self . use_parallel_executor :
if not self . _finalized :
if hasattr ( e , "code" ) :
if data is None :
if isinstance ( job . trigger , IntervalTrigger ) :
if abs ( i - x ) <= tol :
elif line . endswith ( "\r" ) :
if "sale" in res and "id" in res [ "sale" ] :
if log . getEffectiveLevel ( ) <= logging . DEBUG :
if not description :
if nmt is not None :
if magic == IndexedDataset . _HDR_MAGIC :
if not self . _queue or self . _getters :
if d . block_date in dates :
if not watch_dir :
if len ( logs ) < limit :
if ( ( test_case . name , test_case . io ) in solver ) and ( test_case . available ) :
if normpath in keywords :
if module not in controllerslist :
if item [ "subscription" ] != "none" :
if isinstance ( sym , ast . FunctionDef ) :
if len ( [ v for v in non_version_attrs if v is not None ] ) != 0 :
if "locale" not in dirs :
if isinstance ( s , ( tree . Scope , tree . Flow ) ) :
if self . args . peeklock :
if isinstance ( data , np . ndarray ) :
if self . isfile ( path ) :
if match :
if env . meminfo . rss + size > env . meminfo . mem_limit_soft :
if hasattr ( c , "get_id" ) :
if flags . bit . codec == VIDEO_CODEC_ID_AVC :
if len ( data ) > maxlen - len ( ellipses ) :
if self . unit_system != new_unit_system :
if visitor . needs_fix ( ) :
if created :
if not group_matched :
if not peek ( parser , TokenKind . NAME ) :
elif leaf == SymbolFalse :
if address_name :
if isinstance ( v , dict ) and k != "headers" :
if isinstance ( c . op , Fuse ) :
if value is not None :
if nw_id_ == nw_id :
if not len ( head ) :
if startswith is not None and not key . startswith ( startswith ) :
if tf . keras . backend . is_sparse ( val ) :
if self . mgr . is_multilang ( lang ) :
if settings . FEINCMS_CMS_404_PAGE :
if step > 1 and step == self . dropout_steps [ i ] + 1 :
if arg [ "src_path" ] == arg [ "dest_path" ] :
if not at . precheck ( fileName , root ) :
if line . startswith ( "data:" ) :
if self . queryset is None :
if any ( isinstance ( e , And ) for e in self . exprs ) :
if form_type == "server" :
if artist is None :
if event . message . value is None :
if self . numeric_tester ( "nl_langinfo" , nl_langinfo ( li ) , lc , loc ) :
if issubclass ( handler . __class__ , logging . FileHandler ) :
if not self . show_axes :
if not self . insideKeys :
elif self . operator in { "lon" , "longitude" } :
if self . service_id :
if isawaitable ( _response ) :
if isinstance ( self . data , FileStorage ) and not is_empty ( self . data . stream ) :
if key . startswith ( "tpot." ) :
if os . path . isfile ( f_path ) :
if self . logFile :
if ( data [ - 1 ] ) == "\n" :
if self . queue_com . state == RUNNING and self . stop_task ( ) :
if self . arguments . kwarg :
if position < editor . document ( ) . characterCount ( ) :
if not sent :
if self . description :
if f in ( "." , ".." ) :
if ( dest_dir / "pytorch_model.bin" ) . exists ( ) :
elif len ( col ) == 3 :
if rs == 1.0 :
if v is None :
if shielded and state :
if self . is_ws ( aList [ i ] ) :
if ( entry . keys ( ) & input_features ) != input_features :
if self . __conn is not None :
if items is None :
if not unclosed_end and text [ end ] == "<" :
if value_ is KeyError :
if len ( args ) >= 7 and "content_type" in args [ 6 ] :
if self . _sample_env_ids :
if isinstance ( item , dict ) :
if same_latitude and same_longitude :
if a is not None :
if all ( classes [ k ] >= num_samples for k in classes ) :
if tool :
if not self . run_module ( cmd , args ) :
if v in main_chain and u in main_chain :
if not self [ "fileName" ] . getValue ( ) or self [ "in" ] . source ( ) == self [ "in" ] :
if src [ : , : , 3 ] . any ( ) :
if not perm . has_object_permission ( request , self , obj ) :
if op . attr_key == "virtual_thread" :
if self . _unfinished_tasks . _semlock . _is_zero ( ) :
if self . request . headers . get ( "Content-Type" , "" ) . startswith ( "application/json" ) :
if not _userfullname :
if self . rank == rank :
if x is not None :
if isinstance ( reason . exception , AssertionError ) :
if scan_argv ( self . argv , other_option ) is not None :
if m == localized :
if i == "cookie" :
if isinstance ( value , bytes ) :
if example_len > max_len :
if "file" in kw :
if line . startswith ( ( "#" , "@" , " " , ")" ) ) :
if readInput ( message , default = "Y" , boolean = True ) :
if arch is not None :
elif c == "}" :
if not hasattr ( item , f ) or getattr ( item , f ) is None :
if isinstance ( m , nn . Conv2d ) :
if a . itemsize == 1 :
if variable . is_block ( ) :
if self . scope_ is None :
if v :
if "objURL" in item :
elif instr . mnemonic . startswith ( "asr" ) :
if target :
if self . active_readers == 0 and self . waiting_writers != 0 :
if len ( subwords ) >= delimiter_len and subwords [ - delimiter_len : ] == delimiter :
if exog . ndim == 1 :
if self . type :
if self . _node_prefix and not node . name . startswith ( self . _node_prefix ) :
if type ( e ) is Command or type ( e ) is Option and e . argcount == 0 :
if pos >= 0 :
if isinstance ( test , ast . Const ) :
if fulldata is not None :
if x == 0 and e < 0 :
if not plugin . instance . __doc__ :
if attr == "default" :
if new_scope is None :
if prediction == ys [ i ] :
if p :
if ( payload , place ) not in kb . pageTemplates :
if constraint_data . body . polynomial_degree ( ) == 0 :
if feat is not None :
if plugin . isAncestorOf ( self . last_focused_widget ) :
if consumer == sys . stdout :
if self . _recursive :
if self . symbolic :
if e . args [ 0 ] == "no such module: VirtualSpatialIndex" :
if access_token is None :
if type ( rad ) in [ list , tuple ] :
if not cls . _lib_loaded :
elif self . waiting_readers != 0 :
if k == 0 and j == 1 :
if not response . ok :
if n < len ( buf ) :
if value is not None :
if isinstance ( expr_0 , int ) and isinstance ( expr_1 , int ) :
if request_id in self . _request_id_to_instance :
if self . _gzipped :
if self . option ( "full-path" ) :
if not hasattr ( c , "aggregators" ) :
if isinstance ( value , list ) :
if re_han . match ( blk ) :
if params [ "ok" ] :
if is_resource_action ( member ) :
if compresslevel is not None :
elif b"property" in line :
if build_status == "built" :
if attrname . startswith ( "__" ) :
if sql . lower ( ) . find ( name . lower ( ) ) == - 1 :
if child . nodeType == child . TEXT_NODE :
if not service_data [ 0 ] . endswith ( ".service" ) or service_data [ 2 ] != "loaded" :
if re . search ( r"^\s*\/\*" , source ) :
if patchid :
if self . expr . resultsName :
if old_obj is not None and issubclass ( obj , old_obj ) :
if not key_buf :
if block . enable :
if job :
if not os . path . exists ( fspath + ".spt" ) :
if "tools.staticdir.dir" in conf :
if hasattr ( m [ 1 ] , "event_callback" ) :
if len ( self . _tail_data ) < self . _base_number :
elif hasattr ( lo , "get_field_names" ) :
if e . get_dbus_name ( ) in ( DBUS_NO_REPLY , DBUS_NOT_SUPPORTED ) :
elif needs_string_cast :
if verbosity >= 1 :
if isinstance ( value , StorageClass ) :
if self . _start >= value > self . _stop :
if end_inx > 0 :
elif isinstance ( elem , np . ndarray ) :
if size > 4 :
if retval :
if res . get ( "provisionDate" , None ) :
if any ( not isIn ( v , values ) for v in self . value ) :
if m :
if k . startswith ( "_" ) :
if ent_id in res :
if not self . is_playback ( ) :
if prefix :
if i != 50 :
elif path . is_file ( ) and path . exists ( ) :
if view . line ( s . b ) . size ( ) > 0 :
if not isinstance ( id , list ) :
if token . token_type == "value" :
if reduction . HAVE_SEND_HANDLE :
if watched_event . type == EventType . CREATED :
if not WIN :
if key in self . _targets
if dry_run :
if not isinstance ( tensors [ 0 ] , AutogradCrypTensor ) :
if self . install_dir and os . path . exists ( self . install_dir ) :
if isinstance ( source , model . Phrase ) :
if not results :
if length <= self . LENGTH_LIMIT_TINYBLOB :
if len ( data ) < length :
if val is None :
elif col == UNSEEN :
if completion_routine :
if replace_unk :
if newline :
if url . startswith ( "http:" ) or url . startswith ( "https:" ) :
if not os . path . isabs ( name ) :
if name not in submodule_dict :
if isinstance ( configuration . kwargs [ "value_set" ] , dict ) :
if time . time ( ) - start > timeout :
if not line :
if line [ 0 ] == "#" :
if not a . has_attr ( "pantsref" ) :
if self . query_id == - 1 :
if n == "#" :
if self . cfg . is_ssl :
if intersect_point_tri_2d ( pt , v0 , v1 , v2 ) :
if alias . name == "*" :
if not isinstance ( res , bytes ) :
elif self . current_provider . kind == directory . Provider . PROVIDER_FILE :
if b . name == name :
if axis is not None :
if context :
if self . latest :
if tag_record not in image_record [ "image_detail" ] :
if ( self . middleware . call_sync ( f"{ds[0]}.config" ) ) [ "enable" ] :
if not parsed :
if head_name == "System`List" :
if not callable ( callback ) :
if self . keep_ratio :
if c . getYAxis ( ) == Y_AXIS :
if doc :
if b"element" in line :
if ( run_pyflakes or run_pep8 ) and current_finfo is not None :
if not line or line . startswith ( "-" ) :
if next_chunk is not None :
if not skip_tables :
if not os . path . exists ( fullName ) :
if dir == DirType . LEFT :
elif message . text == "hola" :
if os . path . isfile ( full_fn ) :
if not is_last :
if isinstance ( payload , LiveActionDB ) :
if Y_metadata is None :
if issubclass ( n , m ) and m is not n :
if i > 0 and isinstance ( operation , ( QubitStateVector , BasisState ) ) :
if gas or value or salt :
if self . stack :
if len ( r ) == 0 :
if self . draggingFace >> 1 != 1 :
if remove and not add :
if Store . objects . filter ( translation_project__project = self . instance ) . count ( ) :
if return_type is str :
if callback :
if self . _handle_holder . closed :
if self . use_prop or self . get_prop_name ( ) :
if not is_inst_complete :
if user_request [ "user_id" ] == user_response [ "user_id" ] :
elif "." not in name :
if self . expected_inner_md5sum :
if not s . consume ( "\\" ) :
if request . GET :
if not ( isinstance ( k , str ) or isinstance ( k , unicode ) ) :
if self . is_computed ( ) :
if resp . status == 200 :
if ":" in line and len ( line ) > 0 :
if ha_tools_debug :
if response is None :
if not last_date :
if button == 1 and event . type == Gdk . EventType . BUTTON_PRESS :
if self . concatenate :
if task . state in [ "stopped" , "stopping" ] :
if "No updates are to be performed." in e . message :
if script_files :
if len ( c ) > 0 :
if len ( term ) == 2 or not len ( term ) :
if modargs . remove :
if "bucket" not in self . data :
if m is not None :
if not exists :
if attr != None :
if endpoint :
if not socket . hide and isList ( socket . bl_idname ) :
if self . result_worker :
if isinstance ( config_result [ 0 ] , dict ) :
if mod_name and name == mod_name . lower ( ) :
if dr . confirm ( proc ) :
if not args [ 0 ] :
if A and B :
if isinstance ( value , dict ) :
if progress . length_known :
if not v . has_attribute ( SplitTarget ) :
if col == LAND :
if hasattr ( l , "_reset" ) and callable ( l . _reset ) :
if x is None :
if "torrent" in entry :
if self . do_costes :
if request :
if pickle_time == 0 or pickle_time >= time ( ) :
if name == "EMAIL_BODY" :
if mode == "append" :
if error is None :
if item in self . _expire_time and self . _expire_time [ item ] < datetime . now ( ) :
elif isinstance ( ns , ( list , tuple , set ) ) :
if time ( ) - self . last > 5 and self . qsize ( ) > 0 :
if type ( patch ) is dict :
if m . group ( 3 ) :
if is_training and self . _train_helper is None :
if changeid < less_than :
if name in cmdline . split ( " " , 1 ) [ 0 ] :
if part . type == "uid" :
if rx_i == b"1000" :
if not self . connection_1c . strategy . sync :
if data [ "%s-%d-deleted" % ( prefix , i ) ] :
if not self . _framerate :
if cls . connector . ready :
if key [ - 1 ] == "!" :
if wait :
if isinstance ( submodel , op_type ) :
if self . episodes > 1 :
if type ( v ) == unicode :
if self . contour . filled_contours :
if not isinstance ( flag_data , dict ) :
if self . normalaction :
elif p :
elif self . script_last and self . script_last [ 1 ] == name :
if curses :
if not os . path . exists ( configFilename ) :
if delta . seconds > 2 :
if isinstance ( parent , pytest . Class ) :
if ship is not None :
if trans . execute ( event_data ) :
if limit is not None :
if not self . _is_expression ( ) :
if x . startswith ( home ) :
if build_key :
if not isinstance ( batches , ( list , tuple ) ) :
if self . errors is not None :
if label :
if is_column_dotted ( column ) :
if not isinstance ( pattern , set ) :
if hasattr ( module , "aliases" ) :
if normalize :
if self . args != get_sudo_refresh_command ( ) :
if isinstance ( d , tuple ) and len ( d ) == 2 :
if ( len ( value ) == 2 ) and ( value [ 0 ] <= value [ 1 ] ) :
if os . path . isdir ( path ) :
if len ( l ) != 2 :
if item . nodeid . startswith ( "tests/infer" ) :
elif name == "EMAIL_ATTACHMENT" :
if isinstance ( x , int ) :
if cluster_addr :
if not line :
if not sty . italic and fragment and not fragment . isspace ( ) :
if children is not None :
if self . process . poll ( ) is not None or self . is_interrupted ( ) :
elif payment . payload . decode ( "UTF-8" ) == "product B" :
if max != - 1 and spaces > max :
if ofs + b . uncompressed_size > pos :
elif hunk_of_removals_only ( hunk ) :
if len ( q ) == 1 :
elif token . name == "url" and len ( token . arguments ) in ( 1 , 2 ) :
if self . buf_in or self . _poll_read ( 10 ) :
if counter == max_tries :
if len ( batch_out ) == self . batch_size :
if gscript . find_file ( temp_map , element = maptype ) [ "name" ] :
if self . _has_stop_signal ( raw_inputs ) :
elif child . tag in ( "w" , "c" ) :
if field not in graphql_type . fields :
if response . status == 404 :
if get_setting ( "CREATE_MISSING_SWITCHES" ) :
if "environment" not in entry and "extra" not in entry :
if idx != len ( checks ) :
elif event == EVENT_RETURN :
if len ( maps ) > 0 and maps [ - 1 ] [ 0 ] + maps [ - 1 ] [ 1 ] == p << 12 :
if self . options . rotate_aes_key . lower ( ) == "true" :
if not hasattr ( text , "_x" ) :
if not "." in s :
if type != itype :
if matchSelf :
if "RevisionDate" in r :
if not _is_import_err_msg ( err_str , module ) :
if res :
if not self . is_geo :
if test_path . lower ( ) . startswith ( parent_path . lower ( ) ) :
if hasattr ( o , "credentials" ) :
if self . _shutdown :
if selectedPath is not None :
if arg . replace ( "-" , "" ) == "" and len ( arg ) >= 3 :
if value :
if e . args [ 0 ] == errno . ECHILD :
if version . lower ( ) == "rolling" :
if not locked :
if self . HasCloseButton ( ) :
if value is None :
if exc_fmt is None :
if extracted_items :
if self . with_scaling :
elif not self . word_boundary_char ( text [ left - 1 ] ) :
elif timedeltapattern . match ( namespace . duplicate_detection_history_time_window ) :
if not sub :
if self . _config . SILENT :
if self . fail_yielding :
if self . hasGridlines and ( iTick % self . ticksPerGridline ) == 0 :
if len ( projects ) == 1 :
if self . mutually_exclusive . intersection ( opts ) :
if m . start ( 1 ) < pos and m . end ( 1 ) >= pos :
if not os . path . exists ( script ) :
if self . _flat_pcollection :
if level . blockAt ( nx , ny , nz ) == 0 :
if remove :
if self . unique_key_field == field [ "name" ] :
if response . status == 200 :
if idx == len ( os_widget . get_model ( ) ) - 1 :
if "." + substr + "." in module :
if len ( hexes ) < 2 :
if cleaned_id . startswith ( "-" ) or cleaned_id . endswith ( "-" ) :
if y and xe :
if cap :
if self . content_type is not None :
if field_type == CustomProfileField . CHOICE :
if not self . file . closed :
if not chunk :
if line . startswith ( "#include" ) or line . startswith ( "%include" ) :
elif scroll_if_editing :
if not line . endswith ( "\n" ) :
if highlight is None :
if session . sid in self . _cache :
if tt == 18 :
if max_nb is not None and max_nb <= index :
if len ( norm ) == 0 :
elif self . _aggregate_rows :
if domain :
if item . model is Suggestion :
if len ( cookie_token ) == TOKEN_LENGTH :
if not follow :
if row is None :
if BRANCH_ALIAS_MARKER in git_branch_line :
if linenum > 0 and line [ 0 ] not in "\t " :
if ref . resolved :
if dist ( currentPos , self . ends [ color ] ) == 1 :
if selectedPath is not None :
if seginfo . ActiveSubsegment == 0 :
if name == cur_test :
elif self . op == "/" :
if mime_type is not None :
if binary :
if text == '"use strict"' or text == "'use strict'" :
if context . pending ( ) :
if self . is_root_bridge :
if exc . errno != errno . EBADF :
elif s != None and s not in master_list :
if round ( time . time ( ) ) - os . path . getmtime ( test_run ) > expiry_time :
if title not in found :
if not isinstance ( header , dict ) :
if fields is None :
if param . name :
if source . endswith ( "gif" ) :
if type ( submob ) == AnnularSector :
if not follower_ident :
if value :
if len ( a ) != b . len :
if app is not initialized_app :
if self . compiled_query_ is None :
if not subevent :
if length <= self . LENGTH_LIMIT_MEDIUMBLOB :
if decompressed :
if not os . path . exists ( path ) :
if event_shape [ 0 ] != 1 :
if not FLAGS . ceph_monitors :
if isinstance ( c . getSymbol ( ) . getSymbolType ( ) , SymbolType . PieSliceSymbolType ) :
if prefix in self . comment_tags :
if index > self . largest_index :
if minval > self . C [ i ] [ j ] :
if tool_dict . get ( "add_to_tool_panel" , True ) :
if notify :
if start > self . plugin_args . end :
if using_host :
if lowest_wall is None :
if include_details :
if context :
if A == B :
if result == 0 :
elif type ( targets ) != tuple :
if role in facts :
if dim_value :
if _typ == typ and key is _key :
if message == RESET :
if not isinstance ( defaultMessageHandler , Gaffer . ProcessMessageHandler ) :
if relativeto is not None :
if c == "&" and not decode :
elif line and not line . startswith ( "#" ) :
elif previous_echoed . endswith ( "foo3" ) :
if status == MemcacheDeleteResponse . DELETED :
if isinstance ( plug , ( Gaffer . FloatPlug , Gaffer . IntPlug ) ) :
if codepoint == "0xd835" :
if page . relations . aliases_norm is not None :
if isinstance ( test , unittest . TestSuite ) :
if partition_id not in partitions :
if self . headers :
elif operation == "update" :
if r == self . _zero :
if value is not None :
if firstHeading :
if parameter . startswith ( "platformName" ) :
if name . startswith ( "SCE_" ) :
if not operation_name :
if modelNode :
if node [ "type" ] == "sample" and not node [ "is_observed" ] :
if not isinstance ( value , bytes ) :
if not ctx . resilient_parsing :
if list_str [ i ] in set_value :
if wipe or not self . isfile ( path ) :
if not isinstance ( values , list ) :
if not name . startswith ( "wait_until" ) :
if os . path . exists ( os . path . join ( path , ifconfig_cmd ) ) :
if extension in EXTENSIONS :
if authed_user :
if _new_login :
if len ( response ) > 0 and FIELD_STATE in response :
if block :
if os . path . isfile ( path ) :
if not ( fast and module_name in KNOWN_PROBLEM_MODULES ) :
if match :
if import_path != "pip" :
elif self . __show_animation :
if key [ "KeyType" ] == "RANGE" :
if src == "command line" :
elif tag == "New" and text :
if current_finfo is not finfo :
if len ( ret ) > width :
if i % 2 == 0 :
if not chr ( self . cache [ offset + 3 - i ] ) . isalnum ( ) :
if child . nodeType == child . ELEMENT_NODE :
elif len ( text ) == 1 or text [ - 2 ] in "\n\x85\u2028\u2029" :
if isinstance ( arg , bytes ) :
if data [ "type" ] not in ( "stock" , "data" , "image" ) :
if match :
if v [ "type" ] == BMP_TERM_TYPE_STRING :
if text [ end - 2 : end ] == "#}" :
if win . DroppedRect ( ) . height ( ) != win . ref . DroppedRect ( ) . height ( ) :
if msg . args [ 0 ] != 0 :
if deprecate_info :
elif val == 1 :
if t . storage_form ( ) in l :
if val > 255 or val < 0 :
if not isinstance ( rgroup , findlib2 . ReplaceHitGroup ) :
if resource not in resource_producer :
if isinstance ( schedule_def , PartitionScheduleDefinition )
if metric not in metrics :
elif self . _dicts :
if label_part == label and metric not in effective_metrics :
if nic not in out :
if type ( result ) in ( ConvertingDict , ConvertingList , ConvertingTuple ) :
if re . search ( "_test$|_test_$|_unittest$|_unittest_$|^test_|Tests$" , name ) :
if c in legal_indent_chars :
if not self . orig_prefix :
if name . startswith ( expr ) :
if name in pname :
if not node . isdir :
if i % 2 :
if level + 1 == len ( hits ) :
if k == "p" :
if sys . platform == "darwin" :
if depth == 0 :
if meter not in self . meter . keys ( ) :
if not isinstance ( optimizer , OSS ) :
if wx . Platform == "__WXMSW__" :
if batch > batches or batch < 1 :
if column . foreign_keys :
if i < l :
if amt > L :
if self . is_output or self . is_linked or not self . use_prop :
if rows != 1 :
if self . sl_hdlr :
if self . srcdevs [ srcdev ] == 0 :
if i >= self . tailoff ( ) :
if sizes [ b ] [ p ] > 0 :
elif y_pred_proba . shape [ 1 ] > 1 :
if self . currentIndex + n > self . image . shape [ self . axes [ "t" ] ] :
if len ( self . weights . shape ) > 1 and len ( self . weights ) > 1 :
if type ( col ) == str or type ( col ) == unicode :
if type ( v ) in [ list , tuple ] :
if expr . size == arg . size :
if char != compare_against [ i ] :
if response . status_code == 200 :
if hasattr ( self , "theme_cls" ) and not self . focus_color :
if self . hosted_service_name is not None :
if k . startswith ( "&#" ) and k . endswith ( ";" ) :
if paramType == "boolean" :
if a < b :
if "locked" not in getSafeExString ( ex ) :
if self . bad :
if self . isRoomSame ( user . room ) :
if PY3 :
if issubclass ( layout_object . __class__ , clz ) :
if len ( kwargs [ "event_data" ] [ key ] ) > 1024 :
if production [ "tokenname" ] :
if self . repository is not None :
if isinstance ( self . _definition , dict ) :
if not exists ( dirname ( pygments_dir ) ) :
if self . conversion_fn :
if proc . is_alive ( ) :
if not c . accepts_epsilon :
if not self . done_future . done ( ) :
if os . path . isdir ( cpath ) :
if resp :
if end and end in line :
if self . multiple and len ( set ( opts [ self . name ] ) ) > 1 :
if isinstance ( self . active_mode , deluge . ui . console . modes . cmdline . CmdLine ) :
if stat . S_ISDIR ( mode ) :
if getattr ( command , "positional_arg" , False ) :
if line . endswith ( "\r\n" ) :
if self . plugin_args . start <= vaddr <= self . plugin_args . end :
if k in node . names :
if doc . get ( "authors" ) :
if gate is self :
if not self . col :
if match [ "match_querystring" ] :
if p > 0.5 :
if operation [ "type" ] == "crop" :
if value . is_distribution and not value . is_uniform :
if scm_to_conandata is None :
if table_set is None :
if self . _entry_has_critical_rating ( entry ) :
elif self . dtype in FILTER_DTYPES :
if "color_message" in recordcopy . __dict__ :
if not reg or enum is None :
if current_type is not None :
if start in line :
elif section :
if sys . version_info >= ( 3 , ) :
if prop [ "computed" ] :
if self . inplace :
if second_byte == 0x3A :
if escaped :
if not attrs is None :
if isinstance ( inputs [ 1 ] , int ) :
if args . sort_order in [ "asc" , "ascending" ] :
if value in addresses :
if fuzz_payload is None :
if isinstance ( result , str ) :
if commit and not self . in_transaction ( ) :
if operation :
if i >= len ( aList ) or aList [ i ] == "\n" :
if isinstance ( arg , list ) :
elif child . tag not in self . tags_to_ignore :
if display_gross :
if class_value in self . strip_elements :
if silent_success and num_errors == 0 :
if target . basename in basename_seen :
if api_version_str == "latest" :
if len ( result ) == 1 :
if asname is not None :
if not has_balanced_parantheses ( entity_text ) :
if new_learn_rate >= learn_rate_minimums [ index ] :
if cast is None :
if not re . match ( "[0-9]" , str ( tokens [ s ] ) ) :
if sys . platform == "win32" :
if dataset and tarfile . is_tarfile ( dataset . file_name ) :
if k . startswith ( "_" ) :
if "_name" in t and t [ "_name" ] == n :
if self . match ( "," ) :
if config [ "writer" ] == "json" :
if not len ( line . strip ( ) ) :
if result is None :
if dylib_name :
if data_list [ 1 ] in forms . fields . EMPTY_VALUES :
if self . _thread is None :
if has_module :
if not c :
if self . versions :
elif member [ 0 ] == "wildcards" :
if contains :
elif event . GetKeyCode ( ) == wx . WXK_RETURN :
if module is None or not hasattr ( module , attr ) :
if event . type == NOEVENT :
if torch . is_tensor ( value ) :
if "validate" in sub [ "config" ] [ "algorithm" ] :
if menu_name is None :
if field . offset is None :
if isinstance ( definition , ast . OperationDefinition ) :
if not ability . effect . isImplemented :
if user_profile_id not in self . batch_start_by_recipient :
if not start_enabled :
if op . stage == OperandStage . map :
if os . path . exists ( init_path ) :
if isinstance ( hdl , EngineLogHandler ) :
if tol < machine_epsilon :
if resolved is None :
if instr . mnemonic . startswith ( "lsr" ) :
if stop_on_first_trigger :
if spec and spec . has_output ( ) :
if not item_ref :
if "destination" in body :
if line . startswith ( prefix ) :
if ye < 0 :
if len ( values ) + 1 < idx :
if fit . calculated :
elif isinstance ( m , nn . BatchNorm2d ) :
if ext == ".zip" :
if not d . get ( "subject" ) :
if key in seenDict :
if len ( else_ ) == 1 and isinstance ( else_ [ 0 ] , If ) :
if eyelink_ver == 3 :
if not getattr ( bpy . types , monad . cls_bl_idname , None ) :
if dict [ pattern [ i ] ] != list_str [ i ] :
elif "test" in tok and len ( tok ) == 1 :
if spid == cpid :
if val == 0 :
if self . quitting :
if hypot ( x - self . coords [ i ] [ 0 ] , y - self . coords [ i ] [ 1 ] ) < 4 :
if self . cmd_path :
if suppress_error :
if self . act_deterministically :
elif node . binary in ( BINARY_UPDATE , BINARY_DOWNLOAD ) :
if not state :
if None not in ( x , y ) :
if name . endswith ( ".mod" ) :
if completed_process . stderr is not None :
if k . lower ( ) == test_header . lower ( ) and v == test_value :
if proto < 4 :
if not rows :
if x > self . box [ 2 ] :
if widget and isinstance ( widget , PackageSelectWidget ) :
if not line :
if time_now - record [ "update" ] > self . ttl :
if "." in fn :
if reference . program_counter >= len ( reference ) :
if logconfig and os . path . exists ( logconfig ) :
if start_char == True :
if new_nonce_url is None :
if line [ len ( comment ) : ] . lstrip ( ) . startswith ( comment ) :
elif isinstance ( arg , ( int , float ) ) :
if new_pos == - 1 :
if participant in self . participants_dict :
if _type == "def" :
if tag . user :
elif v [ 1 ] >= radius_result [ v [ 0 ] ] :
if cred :
if self . stale_timeout and self . is_stale ( ts ) :
elif type ( v ) in [ int , float , long , complex ] :
if pos :
if fnmatch . fnmatch ( tgt , host ) :
if attval . value_callback :
if key not in current_config :
if sys . argv [ 1 : ] :
if mimetype != "text/plain" or count != 1 :
if len ( ci_names ) == 0 or ci . lower ( ) in ci_names :
elif stats [ "op" ] == "Write" :
if settings . USE_TZ :
if self . config [ "dataparallel" ] :
if not math . isnan ( scale ) :
if factor not in factor_set :
if message [ "type" ] == "websocket.connect" :
if option == str ( value ) :
if src_plot is None or ( link . _requires_target and tgt_plot is None ) :
if not ext_errors :
if os . path . exists ( srcdir ) and not os . path . exists ( destdir ) :
elif "hoverURL" in item :
if table is not None and not table . is_current_version ( table_version ) :
if v [ "schema" ] [ "type" ] == "object" :
if anonymous :
if thisDynamic in dynamicStrToScalar :
if p not in box :
if wstate != "normal" :
if p . poll ( ) is None :
if ( n . ip , n . port ) == ( node . ip , node . port ) and n . id != node . id :
if this . ignore_case :
if valid_pkg :
if name is None :
if xlib . XFilterEvent ( e , e . xany . window ) :
if stage == "send" :
if this . glob :
if not any ( r . category in self . expected_warning for r in self ) :
if v [ "_class" ] == "User" :
if i == 2 and self . count < 1 :
if response . startswith ( b"MMcS" ) :
if not os . path . exists ( dst_root ) :
if i > j :
if key == "nw_src" :
if os . path . isfile ( path ) :
if self . delete_model ( self . get_one ( pk ) ) :
if test_predicate . do_include ( { "volume_guid" : val } ) :
if checked :
if self . fusefat . poll ( ) is not None :
if processor not in processors :
if converter [ "source" ] == "fasta" and converter [ "target" ] == "tabular" :
if len ( self . _pids [ watcher ] ) == 0 :
if relu :
if config_root_path and root_path == config_root_path :
if k == HySymbol ( "__init__" ) :
if child . tagName == "Directory" :
if len ( search ) > 0 :
if pattern . startswith ( "*." ) :
if x . attribute != "Record" and hasattr ( x , "data_model" )
elif not metadata . get ( "nargs" ) :
if cover . imageformat == MP4Cover . FORMAT_JPEG :
elif value == "negative" :
if not self . skip_ws or not self . character_data . isspace ( ) :
if raise_error :
if attribute [ 0 ] != "_" :
if metadata is not None :
elif len_ is None :
if self . _is_init :
if frappe . db . get_value ( "Lab Prescription" , self . prescription , "invoiced" ) :
if "terminology" not in source . all_flags :
if base :
elif tag == "script" :
if isinstance ( head , str ) :
if user_agent not in kwargs [ "headers" ] [ "user-agent" ] :
elif self . _naive or not self . _joins or self . verify_naive ( ) :
if isinstance ( menu . json_content , str ) :
if os . name == "nt" :
if variable . is_cuda :
if not os . path . exists ( os . path . dirname ( path ) ) :
if field . fieldname not in cleaned_data :
if isinstance ( nick , bytes ) :
if self . completed_calls >= self . _resolve_at_msg_count :
if x not in book . format_map :
if less_than_7_only and i >= 7 :
if parser . is_quoted ( ) :
if "name" in tag . attrs and tag . attrs [ "name" ] in ( key , ) :
if hasattr ( obj , "use_scope" ) :
if y > self . box [ 3 ] :
if os . path . isfile ( shell ) and os . access ( shell , os . X_OK ) :
if aggr and aggr not in c . aggregators :
if len ( items ) > 1 :
if user and social . user != user :
elif typ in [ "strong" , "code" ] :
if self . rbFit . GetValue ( )
if h is None :
if res . status_code != requests . codes . ok or res is None :
if len ( payload ) != self . DATALEN :
if not tester ( act . rstrip ( ) , exp . rstrip ( ) ) :
if i < len ( stats ) :
if { "ref" , "class_name" , "config_path" } . intersection ( param . keys ( ) ) :
if pantsref not in precomputed . pantsref :
elif "." in svalue :
if type ( o ) == datetime . datetime :
if value is True :
if context . rounding == ROUND_CEILING :
if self . RBRect :
if r == "None" :
if d . GetLayer ( ) == pcbnew . Edge_Cuts :
if operation [ 0 ] == "resize" :
if account . discriminator == "easaccount" :
if dropTarget != self . GetRootItem ( ) :
if len ( self . specs ) == 1 :
if action_space is None :
if s :
if desc [ 0 ] != "-" :
elif os . path . isfile ( full_name ) :
if final_dst is not None :
if args . resource_ref :
if len ( duplicates ) :
if select . _limit_clause is None :
elif act . lower ( ) == "approx_gelu" :
elif self . type == "SELECT" :
if node . tag_type == OPEN_TAG :
if t == "representation" :
if add_to_transit :
if root_path :
if cp . returncode == 0 :
if not self . flags . forc :
if self . KEY in function . context :
if len ( transformations ) > 1 :
if not inp :
if self . vw . isValidPointer ( reg ) and self . vw . getLocation ( reg ) is None :
elif flt ( doc . percent_complete ) == 100.0 :
if len ( w . shape ) != new_w . shape :
if value is not None :
if namesp :
if self . _pending_removals :
if event . EventObject is self . list_ctrl :
if graph . has_edge ( edge ) :
if default . lower ( ) == "true" :
if isinstance ( elem , str ) :
elif subst [ name ] is not var :
if self . use_tpu :
if self . receivexlogs [ site ] . is_alive ( ) :
if node is None :
if sub == sub [ : : - 1 ] :
if isinstance ( elt , ( int , long ) ) :
if user . title . lower ( ) == username . lower ( ) :
if e . name in self . pending_elements :
if len ( self ) < self . max_size :
if name in self . _local_type_del_descriptors :
if participant is None or participant == self . simulator_config . broadcast_part :
if inputs [ - 1 ] . owner is None :
if self . _cancel_status . effectively_cancelled :
if shapes is None :
if config_var not in config [ module_json [ "name" ] ] :
if prefix :
if not line or line . startswith ( "#" ) or "=" not in line :
if isinstance ( handler , StreamHandler ) :
if name in excluded :
if not self . in_current_block ( self . cursor ) :
if os . path . exists ( project_dir ) :
if reuse_len is not None and reuse_len > 0 :
if not channel :
elif img . width >= width and img . width * img . height > image . width * image . height :
if len ( current ) > 0 :
elif isinstance ( getattr ( self , field [ 0 ] ) , bytes ) :
if end < self . plugin_args . start :
if not scoperef :
if self . host_uuid :
if "stream" in line and line [ "stream" ] . strip ( ) :
if name . startswith ( "_" ) :
elif not compare . compatible_with ( v , True ) :
if controls_ids != "all" :
if isinstance ( payload , bytes ) :
if res . error_no == 0 :
if ss [ "revision" ] :
if not path_tail :
if 1 <= i :
if os . path . isfile ( item ) :
if str ( libcxx ) == "libstdc++" :
elif isinstance ( v , basestring ) :
if verbose :
if review_request . local_site_id :
if s [ 0 ] < len ( model ) - 1 :
if not data :
if self . cell [ 1 ] in s :
if not hasattr ( wsgi_errors , method ) :
if not rules_module :
if group not in d2 :
if key in ( "paused" , "modified_on" ) :
if name . lower ( ) in phrase :
elif allow_nw_id_external is not None and nw_id_ == allow_nw_id_external :
if not line :
if is_prev :
if method and callable ( method ) :
if settings . USE_LOCAL_PATH :
if self . _log_n [ i ] is not None :
if choice :
if isinstance ( val , netCDF4 . Variable ) :
if isinstance ( r , Exception ) :
if module_json [ "name" ] not in config :
if not isinstance ( vs , list ) :
if msg is None :
if not line :
if not requestor . is_superuser :
if not subj or subj == s :
if stats [ "uptime" ] > 86400 :
if source :
if not svalue :
if el . tag == "DisplayName" :
elif order == 1 :
if self . stream . tell ( ) >= self . maxBytes :
if entry :
if "syntax error" not in str ( e ) :
if not b :
if container . pop ( _list_marker , False ) :
if not os . path . exists ( dirname ( self . checkpoint_path ( ) ) ) :
if library_description :
if poll [ 0 ] >= 1 or poll [ 1 ] >= 1 :
if workflow :
if example . valid :
if self . _unit == "word" :
if state == tk . DISABLED :
if vrf_rf is not None and table_id != vrf_rf :
elif "protected" in obj and obj [ "protected" ] :
if prefs . developer_mode :
if counter % 10000 == 0 :
if os . path . isdir ( locale_dir ) :
if distance == 0 :
elif isinstance ( text , ShellText ) :
if expected_status == 201 :
if not filter_method ( context , filter_item ) :
if isinstance ( data , str ) :
if isinstance ( instr , AsmRaw ) :
if operation . type == ProductAttributeType . PRODUCT :
elif act [ "component" ] [ "code" ] in MANUAL_INTERVENTION_COMP_CODES :
if not authorization_required :
if cred . kind == self . source . replace ( "ec2" , "aws" ) :
if self . party_account and self . party_type in ( "Customer" , "Supplier" ) :
if g :
if i >= min ( len ( scales ) , len ( vidxs ) // 2 ) :
if not isinstance ( val , list ) :
elif row [ 0 ] > linenum :
if "," in line or ";" in line :
if not all ( c in string . hexdigits for c in txt ) :
if redo :
if not self . inplace :
if "'" in text :
if err . code in ( 401 , 403 ) :
if billing . plan . change_access_control :
if type ( node . value ) in ( StringType , UnicodeType ) :
if stack_name not in requires :
if k . startswith ( "PPP_" ) :
elif isinstance ( m , nn . Linear ) :
if len ( socket . prop_name ) > 0 :
elif field_name [ "int_field" ] [ "op" ] == "lte" :
if i == 0 :
if attr_path :
if issubclass ( cls , UIModule ) :
if leaf in input_dict :
if isinstance ( value , memoryview ) :
if var . can_contain ( "\n" ) :
if filename [ len ( filename ) - 1 ] == "'" :
if os . path . isdir ( fn ) :
if not k in ( "data" , "gae_user" , "credentials" , "content" , "config" ) :
if executable . check ( ) :
if sys . platform == "darwin" :
if isinstance ( results [ i ] , dict ) :
if parent_id is None or parent_id == id :
if not path in self . entries :
if "polarization" in ds_info :
if ffi . typeof ( gdobj ) . kind == "pointer" :
if len ( chars ) > 0 :
if np . isclose ( weighted_count , 0.0 ) :
if current != data :
if option != other_option :
if arg is None :
if len ( tasks ) :
if callable ( field . default ) :
if ext is None :
if batch_idx * len ( data ) > TEST_SIZE :
if not self . __progress_status :
if not vtt_path :
if fn_batch_ndim < value_batch_ndims :
if tt == 10 :
if isinstance ( ENABLE_JS2PY_ERRORS , bool ) :
if item :
if self . configuration . eqlx_pool != "default" :
if self . pk :
if booster in self . original :
if ex < 500 :
if shape :
if EnumLoc == Ident1 :
if ogid is not None :
if old_val == val :
if self . shift_address and addr :
if event == EVENT_CALL :
if not self . is_playback ( ) :
if i == x [ 0 ] and j == x [ 1 ] :
if build_data . built ( dpath ) :
if url in repo . remotes :
if not skip :
if ip . device . venture is not None :
if isinstance ( state [ k ] [ 0 ] , QtGui . QVector3D ) :
if ext_name . startswith ( "CL_" ) :
if sha256sum is None :
if not cmd . stdout . strip ( ) :
if "min" in attributes :
if cs [ "workerid" ] != workerid :
if final_contexts is not self . new_contexts :
if self . _keys [ hash_ ] is self . _empty :
if tt == 10 :
if tot > 3 * len ( X_train ) :
if i + 1 != len ( self . vars ) :
if "PublicPort" in port :
if family . get_mother_handle ( ) :
if len ( cache ) > max_size :
elif op . stage == OperandStage . agg :
if script [ sop_idx : sop_idx + len ( sig ) ] == sig :
if attr != 0 :
if ".svn" in dirs :
if cls . needs_target_sync :
if not self [ "debug" ] :
if extra . loc :
if not sensor_state :
if not allowed :
if not isinstance ( key , str ) :
if little_endian :
if self . has ( prop ) :
if dirs and not os . path . exists ( dirs ) :
if src . startswith ( "<!--" ) :
if fix :
if use_logind :
if start_new_word :
elif tp == "flush" :
if m :
elif isinstance ( in_arrays , dict ) :
if user . is_superuser or obj . owners . filter ( pk = user . pk ) . exists ( ) :
if sp . issparse ( y ) :
if attribute in [ INTENT , ACTION_NAME , INTENT_RESPONSE_KEY ] :
if self . set_extra_data ( extra_data ) :
if new_environ != old_environ :
if i not in markups :
if column_index is not None :
if tool_data_table_path not in self . tool_data_watcher . monitored_dirs :
if hasattr ( obj , "__class__" ) :
if self . model_res :
elif self . _flow_type == REALTIME :
if isinstance ( getattr ( self , field [ 0 ] ) , POINTER64 ) :
if isinstance ( configuration . kwargs [ "value_set" ] , dict ) :
elif i not in seen :
if self . list_ctrl . IsSelected ( index ) :
if self . cbhdl is None :
if ret . returncode :
if line is None :
if orig_text [ - 1 ] not in ( "," , " " ) :
if even :
if "REFUND" in params [ key ] or "|" in params [ key ] :
if hasattr ( self , event_handler_name ) :
if param_lr == 1.0 :
if not self . initialized :
if not self . need_save :
if match ( s ) :
if value >= minv :
if "qemux86copy-" in root or "qemux86-" in root :
if mime_type and mime_type . startswith ( "image" ) :
if to_boolean ( callbackfn . call ( _this , ( kValue , float ( k ) , array ) ) ) :
if flags . DEBUG :
if disk . id == volume . id :
if level > 1 :
if which == "pipeline_node" :
if name not in default_settings :
if self . choices is None :
if size is None :
if re . match ( r"[^ ]+\?(.+)" , item , re . I ) :
if len ( i . wires ) == 1 :
if stmt == lines [ lidx ] :
if module . bias :
if entry . is_file ( ) :
if always_push_mark :
if "hyper_parameters" in key :
if conflicting_members . exists ( ) :
elif auto_pad == "SAME_UPPER" :
if tt == 10 :
if os . path . exists ( "cromwell_work" ) :
if not nb in versions :
if settings . USE_TZ :
if status :
if custom_action_keyword [ "Dict" ] [ "On" ] in phrase :
if primary_key :
if len ( x ) != n_in :
elif val < 1024 ** 2 :
if parent_name :
if k == "user" :
if self . compile :
if isinstance ( self . header , RenderedContent ) :
elif isinstance ( value , dict ) :
if issubclass ( picker . __class__ , wx . FileDialog ) :
if err . args [ 0 ] in ( ssl . SSL_ERROR_WANT_READ , ssl . SSL_ERROR_WANT_WRITE ) :
if self . counting != "detailed" :
if self . need_transform :
if diff ( filepath , new , encoding ) :
if arn_gen :
if "KubeflowV2DagRunner" not in dsl_contents :
if properties :
if not len ( head ) :
elif self . oper_dtype == sp . csr_matrix :
elif isinstance ( v , ( list , tuple , dict ) ) :
if binary . left in cols and binary . right in cols :
if kill_switch_ev is not None :
if s is None :
if self . vw . vaByName ( name ) :
if bmin == bmax :
if poly_i :
if ext == ".py" or ext == "" and os . path . isdir ( os . path . join ( basedir , name ) ) :
elif line . startswith ( "-" ) :
if status :
if info not in self . _reverse_infos :
if combo . GetValue ( ) == 1 :
if c . strip ( ) . startswith ( "CSRF-Token-" ) :
if path :
if message :
if x :
if - delta < imag . get_float_value ( ) < delta :
elif t == SQLITE_TEXT :
if string == "False" :
if store . _test_transaction ( ) :
if self . default_rule and match != self . default_rule :
if data is not None :
if isIPv4 ( line ) or isIPv6 ( line ) :
if cum < self . left . s :
if len ( value ) == 2 :
if k in ( "lccn" , "oclc" , "isbn" ) :
elif action == "replacement" :
elif t == "vietnamese" :
if params [ "Attributes" ] != 0 :
if tktype in ( "carbon" , "cocoa" ) :
if b . name . startswith ( "__" ) :
if value :
if updated_lock :
if len ( batch_shape ) < - self . dim or batch_shape [ self . dim ] != self . size :
if not changed :
if dropout :
if o . name . lower ( ) == name . lower ( ) :
if name . startswith ( "check_" ) :
if isinstance ( value , basestring ) :
if not node [ "ids" ] :
if use_first_value and len ( value ) > 0 :
if return_code is not None :
if self . command_is_enabled ( item , focus ) :
if not app . config :
if getattr ( mod , "module_type" , "" ) . strip ( ) == mod_type . strip ( ) :
if not key in do_not_write
if isinstance ( v , Table ) :
if os . path . basename ( fname ) in infinite_loops :
elif k . stop is not None :
if lowest_wall is None :
if subchunk_id == b"data" :
if type_constraint . satisfied_by ( tgt ) and target_predicate ( tgt ) :
if not re . match ( PROCTYPE_MATCH , k ) :
if digit >= 10 :
if char != "\n" :
if partner_node not in partners :
if not stored_prompt :
if isinstance ( definition , IconColumn ) :
if not is_valid_key :
elif path . is_dir ( ) and "." not in name :
if k [ : 1 ] == "-" :
elif isinstance ( const , CodeType ) :
if study_id in self . _studies :
if self . __Token :
if active_greenlet is not None and active_greenlet != self . _hub :
if retval :
if line . startswith ( ">>%s" % section_name ) :
if is_first or stride == 1 :
if string_value != "NONE" :
if not current_test_name :
elif stats [ "uptime" ] > 3600 :
if not self . visible :
if counters [ title ] > 1 :
if "resourceUri" in expected :
if string is None :
if print_error :
if isinstance ( value , AlbumNode ) :
if connector . ready :
if i == len ( keys ) - 1 :
if v :
if type ( targets ) != list and type ( targets ) != tuple :
if dt is not None :
if r :
elif strings is not None :
if not isinstance ( initial , list ) :
if hasattr ( package , "__loader__" ) :
if self . waiters :
if i == num_modules - 1 and multi_scale_output == False :
if self . frontAlterationAccidental . alter == 0 :
if k in self . freeze_these :
if sig in GPL_NEVER_MIGRATE :
if self . training_tracker is not None :
if isinstance ( field . type , Structure ) :
if old_value is NULL :
if not self . _final :
if self . match ( ")" ) :
if int ( day ) < 1 or int ( day ) > 31 :
if isinstance ( entry , dict ) :
if os . path . exists ( qtgt ) :
if not isinstance ( dim_value , int ) :
if brace_tree :
if isinstance ( data , str ) :
if sortMode is not None :
if e . errno != errno . EAGAIN :
if isinstance ( m , string_type ) :
if schema is not None :
if not ( 0 <= value <= 0xFFFFFF ) :
if name != "bonobo" :
if isinstance ( operation , migrations . RenameModel ) :
if strip_delimiters :
if lccn :
elif name == "covar_module.base_kernel.raw_lengthscale" :
if not r or not self . _sock . recv ( 1024 ) :
if a . alpha ( ) >= self . _inputvalues :
if not is_prefix ( self . path , sr_path ) :
elif key in ( "max_epochs" ) :
if axis == "_" :
if node . test is not None :
if not any ( [ not is_text ( s ) for s in node . contents ] ) :
if path . endswith ( ":" ) :
if sales_person and sales_person != self . name :
if "init" not in item . keywords :
elif e . filter == select . KQ_FILTER_WRITE :
if path == "/" :
if get_errno ( e ) == errno . EPIPE :
if hashash is not None and hashash == self . comp . genhash ( code , package_level ) :
if list_idx is None :
elif isinstance ( sym , ast . ClassDef ) :
if package :
if len ( self . _editableChildren ) :
elif isinstance ( v , _bytes ) :
elif isinstance ( s , np . ndarray ) and s . size == 0 :
if conf [ "properties" ] [ "attributes" ] [ "exp" ] :
if reg not in gpregs . expr :
if not self . reference_no or not self . reference_date :
if monad . cls_bl_idname == self . cls_bl_idname :
elif plen > 0 :
if isinstance ( inp , np . uint8 ) :
if bbox is None :
if random ( ) < self . mutationProb :
if nSpaces :
if len ( c ) != 2 :
if cursor . y not in line_nums :
if rule_exists :
if isinstance ( node , DisjunctionNode ) :
elif w not in identified :
if attribute . object_relation == "raw-data" :
if match :
if fn is not None :
if classValue :
if value not in EMPTY_VALUES :
if mode in [ "rb" , "wb" , "ab" ] :
if _path [ - 1 ] != current_path [ - 1 ] :
if lookup in level_per_module :
if self . HasMaximizeButton ( ) :
if dista < distb :
if "::1" in line :
if not fpath . exists ( ) :
if ip_shell is None :
if ext != PYTHON_SOURCE_EXTENSION :
if gates [ i ] :
if self . end_time and self . _is_later_than_end_time ( segment_path ) :
if not confirmation :
if compute_env . env_type == "MANAGED" :
if result :
if br . layer is Layer . Blocks or br . layer not in layers
if isinstance ( jre_home , bytes ) :
if name not in self . config [ "plugins" ] :
if depth == 0 :
elif not compare . compatible_with ( v , False ) :
if self . show_aligned_keywords :
if self . midi_ctrl . pulse == self . midi_ctrl . ppqn :
if child . tag in ( "wf" , "punc" ) :
if testdef . exception :
if ( jid , sid , ifrom ) in self . _preauthed_sids :
if timeout is None :
if self . tec_arithmetic . is_in_group ( s ) and type ( t ) != int :
if self . instrument_queue . empty ( ) :
if self . line . startswith ( "Match_columns" ) :
if not isinstance ( entry , dict ) :
if start < ind :
if line == "" :
if tag . name not in ( "input" , ) :
if hash_of_file != hash_of_gold :
if len ( ql ) > 0 :
if item < 0 :
if not config . quiet :
if protect :
if path . startswith ( "cobra://" ) or path . startswith ( "cobrassl://" ) :
elif isinstance ( module , nn . BatchNorm2d ) :
if key not in new :
if difference :
if isinstance ( values , list ) :
elif aqi_data . get ( "status" ) == "error" :
if not isinstance ( y , ( list , tuple ) ) :
if interval == 0 :
if kwargs [ "headers" ] . get ( "user-agent" ) :
if settings_model :
if cur_attempt == num_attempts :
if path != local_plugins_dir :
if cur_node_idx == - 1 :
if self . do_manders :
if f2 :
if auth_prefix . lower ( ) == prefix :
if group :
if cur_spec . satisfies ( spec ) :
if i != - 1 :
elif key . startswith ( "." + _WILDCARD_TOKEN ) :
if type ( node . image ) is not list :
if private :
if response . status_code == 200 :
if not self . dry_run :
if self . _process . poll ( ) is None :
if current_word :
if r is not None :
if not line :
if request . GET :
if not super . builtin ( ) :
if isfile ( self . object ) :
if not os . path . exists ( os . path . dirname ( self . filename ) ) :
if self . config . has_section ( refiner . name ) :
if node . children [ 0 ] . type == token . COLON :
if self . leave :
if alloc not in seq :
if self . compress :
if self . running :
if tt == 16 :
if remaining :
if f :
if not _sys :
if dd [ "results.train_y_misclass" ] < optimal_measure :
if os . path . exists ( self . pathfile ) :
if self . writeback :
if m . _baseDisplay ( callingWindow , srcContext , mainItem , selection ) :
if ( optimize ) or ( Signature . digest ( ) == parsetab . _lr_signature ) :
if os . environ . has_key ( self . name ) :
if rest [ : 2 ] != b"\r\n" :
if info . cursor_position . y <= info . configured_scroll_offsets . top :
if os . path . isfile ( f ) :
if i <= start_after :
if self . signup_code_present :
if self . is_defaultitem ( path ) :
if len ( d ) == 0 :
if nplanes > self . max_per_well :
if parent == path :
if type ( seed ) != int :
if self . _errors != "surrogateescape" :
if session and not session . is_finished :
if idx > arg_index :
if proto == 0 :
if accum [ - 1 ] :
if i >= len ( self . items ) :
if i > 0 :
if comp . transition . b_track == track_index :
if self . _allowed_fields and name in self . _allowed_fields :
if partition_id in self . param_to_partition_ids [ group_id ] [ param_id ] :
if u_socket . hide_safe :
if len ( lines ) < 1 :
if not user_can_view_page ( request . user , page , site ) :
if kwargs . get ( "in_place" , False ) :
if isinstance ( kwargs . get ( "event_data" , { } ) . get ( key ) , str ) :
if authtype in known_auth_schemes :
if value :
elif self . md_bg_color == t . accent_color :
if part_h & 1 :
if key not in old_obj . __table__ . columns :
if tri_gram in tri_grams :
if k == "attrlist" :
if not isinstance ( self . axis , int ) :
if self . __dict__ [ "_" + attrname ] != None :
if category in preset_category_menus :
if reference not in self . _reverse_references :
if len ( symbol ) >= delimiter_len and symbol [ - delimiter_len : ] == delimiter :
if accepted_content_type in handlers :
elif isinstance ( item , int ) :
if tt == 8 :
if vlan_id == self . vlan_id :
if str ( push_allowance . actor . databaseId ) == str ( app_config . GITHUB_APP_ID ) :
if self . clustering . is_fit :
if nbr > size :
if t is None :
if txt [ : 3 ] == "&#x" :
if value is None :
if c == "t" :
if len ( data ) < 100 :
if tf . executing_eagerly ( ) :
if old_prefix is None :
elif ct . startswith ( "text/" ) :
if not data :
if os . path . isdir ( fn ) :
if _lib . OBJ_obj2nid ( obj ) == _lib . NID_crl_reason :
if a > b :
if ch == "}" :
elif px > 0 :
if should_yield and line :
if not isinstance ( handler , handlers . ResourceWatchingHandler ) :
if self . logger :
if log_all :
if groups is not None :
if dt > self . timeout :
if not line :
if self . lasttime is None or x_stats . lasttime >= self . lasttime :
if name in dir ( resource ) :
if isinstance ( prop_vals , ( list ) ) :
if self . valid :
if not fn :
if "=" in f :
if grandchild . tagName != "File" :
if isinstance ( value , datetime . date ) :
if not definition :
if isinstance ( v , torch . Tensor ) :
if self . fail_soft :
if get_array_module ( ret ) . isscalar ( ret ) :
if SLOT_NAME not in chunk :
elif isinstance ( t , str ) :
if new_config . manhole :
if os . path . isfile ( file_path ) :
if isinstance ( k , float ) :
if method is None :
if timeout > 0.0 :
if isinstance ( features , str ) :
if not subevent :
if idx == 0 :
if q < rr [ i ] :
elif os . path . exists ( x ) :
elif "f" in fmt :
if hasattr ( tool , "lineage" ) :
if numel != 1 :
if match is not None and len ( match . groups ( ) ) == 1 :
if leaf == SymbolTrue :
if ( mask + 1 ) >> 64 != 1 :
elif tok . visibility == "protected" :
if node . left is not None :
if self . slots [ slot_id ] . selling :
if self . HasCapture ( ) :
if isinstance ( v , dict ) :
if t . sheet :
elif text != self . labelList . item ( i ) . text ( ) :
if not self . linked_structure . can_match ( structure ) :
if online and self . _is_testbot_online ( ) :
if self . match_function ( path ) :
if height <= MAX_TEXTURE_SIZE and width <= MAX_TEXTURE_SIZE :
if not args . raw :
if self . model_name == owner_model . __name__ :
elif isinstance ( field , fields . ListField ) :
if subclass_req is not None and not issubclass ( val , subclass_req ) :
if theme . has_icon ( icon_name ) :
if int ( oldLimit ) < limit :
if not online and not self . _is_testbot_online ( ) :
if context . rounding == ROUND_FLOOR :
if col_items > rows :
if self . timer :
if second_level_res . ready ( ) :
if not hasattr ( other , "items" ) :
if hasattr ( o , "services_config" ) :
if DEBUG_COMM :
if not proc . is_alive or proc . is_frozen :
if key in [ "attachments" , "custom_attributes" , "description_diff" ] :
if mode == "predict" :
if addr not in addresses :
elif self . _chain_notify :
if not ( i < len ( extra . tokens ) ) :
if size > 0 :
if attr_name . endswith ( "pk" ) :
if mydict is None :
if i < len ( list ) :
if exc is None :
if fields [ 0 ] == lang :
if isinstance ( value , alias_flag_value ) :
if use_cuda :
elif target_str . startswith ( u"*** " ) :
if idx not in tmp_result :
if self . puts_ is None :
if args . policy_type :
if GN [ - 1 ] == "." :
if "track" in field :
if video_packet . image == 0 :
if path in _devices :
if not self . _sampwidth :
if record [ 0 ] == "D" :
if self . server :
if _lib is None :
if hasattr ( event_info , "PreviousInstance" ) :
if pkg in Scheduler . listOfPackagesCurrentlyBuilding :
if gap :
if line . startswith ( "?" ) :
if limit == 0 :
elif offset < len ( slice_ ) :
if request . get_json ( ) is None :
if not self . _css . get ( medium ) or path not in self . _css [ medium ] :
if original not in template :
if kwdSndx == soundex ( key . encode ( "ascii" , "ignore" ) ) :
if k . startswith ( "Pad" ) :
if not is_list :
if name [ 0 ] == "#" :
elif silhouette <= best_silhouette :
if not ignore_unknown :
if event . state & Gdk . ModifierType . SHIFT_MASK :
if each :
if path_id is None :
if link . startswith ( "magnet" ) :
if read and read [ 0 ] != "," :
if isinstance ( v , bytes ) :
if old_mtime == mtime :
if self . count == 1 :
if evaluate ( processed_analysis , vulnerability . rule ) :
if isinstance ( val , compat . string_types ) :
if self . event is not None and self . event . is_set ( ) :
elif self . _size . get ( ) < 30 :
if GafferImage . BufferAlgo . intersects ( tileRegion , region ) :
if group_args :
if not defaults and value == default_values [ k ] :
if name is None :
if self . _handler :
if self . is_server ( ) and service == _USERAUTH_SERVICE :
if not self . _write_finished or self . is_client :
if target_pid == pid :
elif op . stage == OperandStage . combine :
if word not in Force_Split_Words :
if type is None or tag [ "d_tag" ] == type :
if line . startswith ( searchfor )
if settings . USE_TZ :
if binascii . hexlify ( ftype ) == oxlitype :
if self . chunkOffset == 0 :
if res :
if "%" not in pattern :
if exc :
if self . _actives_span is not None :
if tmpdir :
if "preview" in api_version_str :
if use_disk and meminfo . rss > mem_limit :
if tt == 8 :
if d < div * 5 :
if not is_logged_in ( ) or not has_access ( "is_coorganizer" , event_id = event . id ) :
if self . _setup_mp_logging_listener_ is True :
if module . is_compatible_with ( client ) :
if idx :
if not collapsed :
if isinstance ( result , float ) :
if task in deps :
if "conv1d" in layer_name or "dense" in layer_name :
elif operator == "Max" :
if relu :
if self . _is_my_trace ( edge ) :
if len ( self . _folder_handlers ) != 0 :
if text == "" :
if message :
if config . get ( "development" ) and config . get ( "json_authentication_override" ) :
if model :
if loc [ L_TINFO ] :
if hasattr ( monad , "cls_bl_idname" ) :
elif peer . last_good > cutoff :
if composite_file . description :
if device :
elif isinstance ( v , dict ) :
if exc . errno != errno . ENOMEM :
elif self . dots :
elif self . scroll_down_rect ( ) . collidepoint ( p ) :
if not copyright :
if country in self . value . all ( ) :
if col + 2 == nCol :
if not any ( [ unicode ( s ) . strip ( ) for s in node . contents ] ) :
if ch in done :
if isinstance ( nbChars , int ) :
if state :
if t [ 0 ] == DecodeMixin . spm_bos_token :
if not os . path . exists ( target_path ) :
if self . _creds . access_key :
if getattr ( mod , "module_name" , "" ) . strip ( ) == m :
if os . path . isfile ( os . path . join ( path , self . index_file ) ) :
if self . mixed_precision :
if len ( val ) == 1 :
if done :
if isinstance ( entry , str ) :
if reg == r :
if var . get ( u"forget" )
if isinstance ( v , dict ) :
if len ( TRANSCEIVER [ t ] ) < b + 1 :
if remove_repetitions and i != 0 and char == sequence [ i - 1 ] :
if self . user_cache is None :
elif e . get ( "event" ) == ActionExecuted . type_name :
if key in ids :
if header_name in headers :
if tt == 10 :
if not os . path . isfile ( filename ) :
if isinstance ( feature_name , str ) :
if pool :
if role in ( "time" , "TIME_PERIOD" ) :
if not trial :
if match :
if done :
if raw :
elif not stringprep . in_table_b1 ( c ) :
elif w in self . word_dict :
if value . has_form ( "List" , None ) :
if dest . exists ( ) :
if vehicle . channels [ k ] != v :
if regex_match :
if self . firsttime is None or x_stats . firsttime < self . firsttime :
if len ( set ( lengths ) ) > 1 :
if not hasattr ( self , k1 ) :
if tokens and tokens [ 0 ] != delim :
if token . token_type == "quoted-string" :
if line . startswith ( comment ) :
if ( i in model . COriginNodeForCell [ h ] ) or ( j in model . COriginNodeForCell [ h ] ) :
if retval :
if n . endswith ( ".py" ) and not n . startswith ( "bad" ) :
if create_target :
if self . mode == "full" and self . method == "fresh" :
if screen_length > screen_length_limit :
elif char == "<" :
if not example . valid :
if isinstance ( value , bool ) :
if not first_exception :
if root_obj :
if molecule . fci_one_rdm is not None :
if subDomain :
if not all_cve_urls :
if skip_flag :
if not interface :
if "sslEnforcement" in conf [ "properties" ] :
if not args :
if self . owner != tid :
if len ( sp . split ( " " ) ) > 1 and not sp . startswith ( "cellular" ) :
if log . getEffectiveLevel ( ) <= logging . DEBUG :
if sign is None :
if type ( til ) is bytes :
if git_branch_line . startswith ( "*" ) :
if hasattr ( a , "includedirs" ) :
if name not in self . _features_dict :
if "io" in race_config . charts :
if name in partition :
elif "field" in condition and "type" not in condition :
if buf . startswith ( prompt ) :
if key in LoggerFactory . schedule_logger_dict :
if wrong_found == 1 :
if not item . group ( "name" ) :
if not unique or sub_child not in res :
if id not in axIds :
if k == neighbors . CONNECT_MODE :
if _timer :
if isinstance ( item , tf . keras . layers . Layer ) :
if __opts__ . get ( "ssh_user" ) :
if bytes :
if telnet_login ( host , port , username , password ) :
if result_str :
if self . _cmysql . fetch_row ( ) :
if f . strbits and isbin ( f . strbits ) :
if cur . obj_offset in seen :
if os . path . isfile ( name ) :
elif isinstance ( _v , BaseTransferVariables ) :
if value and row [ 0 ] == value :
elif isinstance ( methods , ( list , tuple ) ) :
if name . startswith ( "." ) or name == "lastsnap.jpg" :
if key not in keys :
if message :
if p [ 0 ] != "." :
if isinstance ( arg , ast . Name ) :
if isinstance ( publish_year , ( tuple , list ) ) :
if request . path . startswith ( sp ) :
if sub :
if len ( nullable ) == num_nullable :
if input_type == "tensor(float)" :
if diff_min is not None and diff_min != 0 :
if deval is None :
if user_needs_updating ( user , user_data ) :
elif isinstance ( v , bool ) :
if not horizons . globals . fife . use_atlases :
if answer == Gtk . ResponseType . YES :
if sys . version_info [ 0 ] == 2 :
if not RE_ISDISK . match ( data [ "cdev" ] ) :
if col and col . get_title ( ) == _ ( "Active" ) :
if not song . can_change_images :
if pricing_rule . condition :
if len ( self . _scopeStrictModes ) > 0 :
if objectstore . is_remote ( fr ) :
if m is not None :
if os . path . isdir ( os . path . join ( basedir , filename ) ) :
if tt == 0 :
if self . __module__ == "__main__" :
if idx == 0 :
if isinstance ( c , str ) :
if not neighbor :
if is_push_data_token ( token ) :
if key == "st_mode" :
if only is not None and attr not in only :
if cei . index >= n :
if e . value is None :
elif i == ner :
if not word_region . empty ( ) :
elif self . op == "-" :
elif not in_pod :
if data :
if type ( obj ) == types . ClassType and issubclass ( obj , PerfCase ) :
if not r . content :
elif fam . mother_handle and not fam . mother_handle == person . handle :
if not confirmation :
if methods == ALL :
if lm [ "ig-name" ] == initiator :
if value == "above" :
if username in users :
if self . allow_process_request :
if salt . utils . win_dacl . HAS_WIN32 :
if schemaName :
if not isinstance ( op_list , list ) :
if family :
if key in ( "disabled" , "is_up" ) :
if activity_duration != activity . billing_hours :
if cpus == int ( cpus ) :
if isinstance ( prop_value , dict ) and prop_value :
if finder . escaped and finder . text :
if not filematch . exists ( ) :
if container :
if value . shape != self . positions . shape :
if h . name in self . shakes :
if e . resp . status == 404 :
if self . _items_from_datafile_should_be_checked ( df ) :
if kind is None :
elif node . is_registration :
if child . getchildren ( ) :
if timeout :
if exp_m and act_m :
if ON_WINDOWS :
if s != sys . path [ 0 ] :
if not self . _has_season_banner ( show_obj , season ) :
if not grade and not solution and not locked :
if match is not None :
if key in self . _columns :
if res :
if model is models . VolumeGlanceMetadata :
if "results.train_y_misclass" in dd :
if total_mins_elapsed >= self . max_time_mins :
if type ( func ) is tuple :
if t is self . needle :
if filters . get ( key ) :
if config [ key ] [ "inverse" ] is True :
if v != v2 :
if hasattr ( package . __loader__ , "get_data" ) :
if end [ - 1 ] > n_samples :
if self . multi_select is False :
if client_version not in ( "?" , None ) :
if self . match_name :
if size == 1 :
if requires_index :
if result != 1 :
if len ( data ) < length :
if not len ( self . _node_id ) == constants . HASH_LENGTH :
elif lid is None :
if min_len <= len ( src ) <= max_len and min_len <= len ( tgt ) <= max_len :
if options . sublayer :
if not cal :
if not clients :
if line is None :
if not self . request_in_progress :
if self . filter ( sample ) :
if form_class . must_display ( request , * args , ** kwargs ) :
if another . get_active ( ) :
if self . _loop . get_debug ( ) :
if bomb_count > 3 :
if only and key not in only :
if link . meta [ b"state" ] == States . NOT_CRAWLED :
if key == "gitdir" :
if dim_value < 0 :
elif "filename" in handler . keys ( ) :
if dt . year >= ymax :
if status
if not isinstance ( response , rdf_client_fs . StatEntry ) :
if n > max_next :
if sys . version_info >= ( 3 , ) :
if comp is not None :
if k not in self . _data1 and k in self . _data2 :
if end < 0 :
if "start" in params or "end" in params :
elif str ( libcxx ) == "libstdc++11" :
if tag . internal :
if value is None or isinf ( value ) or isnan ( value ) :
if before . to_string ( ) != action . to_string ( ) :
if is_netcoreapp :
elif len ( field_type ) == 1 :
if type ( item ) is ActionHandle :
if opt == "--with-tests" :
if i == index :
if x > y :
if fn . startswith ( "test" ) and fn . endswith ( ".py" ) :
if name . startswith ( "check_" ) or name . startswith ( "call_" ) :
if e . error == "user_is_bot" :
if not self . orig_prefix :
if f . read ( ) . strip ( ) != "Mains" :
if data . app_token == app_token :
if specific_tables :
if _ndx in self . _data :
if not self . bytestream :
if log :
if color == curses . COLOR_BLUE :
if c . isalnum ( ) :
if skip_key :
elif message [ "type" ] == "websocket.receive" :
if get_osx_theme ( ) == 1 :
if self . has_inputs :
if op . node . op == "Const" :
if not offset :
if isinstance ( expr , ir . ExprList ) :
if key in result :
if identifier [ 0 : self . index_depth ] not in self . _index [ start_char ] :
if "attributes" in conf [ "properties" ] :
if attributes != unicode_attributes :
if exit_code != 0 :
if j < segmentCount :
if social . get ( key ) :
if not frames :
if is_shadowing ( pname ) :
if isinstance ( v , dict ) :
if f . clock_domains [ k ] . rst is not None :
if node_settings is None :
if not test . value :
if self . reverse :
if len ( self . in_y ) == 1 :
if isinstance ( item , _StringType ) :
if k . lower ( ) == ikey :
if action == 1 :
if not g . doHook ( "bodyclick1" , c = c , p = p , v = p , event = event ) :
if spec . aggregate . class_weights :
if r :
if parent . type in ( "suite" , "file_input" ) :
if var . get ( u"res" ) . neg ( ) :
if item . Length < 1 or item . get_key ( ) == None :
if typename == "decimal" :
if filename and tarfile . is_tarfile ( filename ) :
if self . useWorldSpace :
if ">" in text :
if e . code == 405 :
elif code == Path . CLOSEPOLY :
if os . path . basename ( fname ) == "shrinker.py" :
if s not in sys . path :
if instance [ "VpcId" ] == vpc
if page . relations . disambiguation_links is not None :
if printElemNumber :
if not credentials [ "attributes" ] . get ( "region" , "" ) . strip ( ) :
if self . _results :
if six . PY2 :
if len ( chunk ) == 0 :
if len ( f . use_previous . times . keys ( ) ) > 1 :
if isinstance ( self . exc [ 1 ] , SyntaxError ) :
if "error" in result :
if dir :
if code == "550" :
if position is OBJECT :
if shell_path :
elif val < 2 * 255 // 3 :
elif item [ 3 ] :
if not file_name . endswith ( ".java" ) :
if counter == retry :
if mod :
if isinstance ( ploidy , dict ) :
if user . room :
if "" . join ( instance [ "Names" ] ) . strip ( "/" ) != container_name :
elif args [ 0 ] == "PING" :
if kwargs :
if name not in variables :
elif tp == "write_flush" :
if skip_file ( fname ) :
if "grid" in open ( outputs [ "trans_file" ] , "r" ) . read ( ) :
if self . _batch is None :
if same_node ( node , origin ) :
if check_error_cmd ( result ) :
if utils . file_exists ( out_file ) :
if sys . platform in ( "win32" , "cygwin" ) :
if ( "jprofile" , 0 , "profiler" ) in callers :
elif isinstance ( self . by_class , int ) :
if not os . path . exists ( "./.rlnas_controller" ) :
if self . _pin_refs [ pin ] == 0 :
elif type in self . __event_types_at_proxy :
if res is not None :
if iterations > 100 :
if line :
if speaker :
if lineno == i + 1 :
if self . _conn_lost >= constants . LOG_THRESHOLD_FOR_CONNLOST_WRITES :
if anime . get ( x , False ) == x_value :
if line . startswith ( "vermagic" ) :
if self . randomized and y is not None :
if self . getSetting ( "invertMouseWheel" ) :
elif self . arch == "amd64" :
if not isinstance ( actions , ( list , tuple ) ) :
if even_only and i % 2 != 0 :
if cached_trial is not None :
if label_format == LabelFormat . CHILD_SUPPRESS :
if expiration > datetime . datetime . utcnow ( ) . replace ( tzinfo = utc ) :
if new_torrent is not None :
if isinstance ( target , six . string_types ) and os . path . isfile ( target ) :
if len ( stdout_buffer ) == 0 :
if key == qkey :
if sys . platform . lower ( ) . startswith ( "sunos" ) :
if zim . fs . isabs ( icon ) or not dir :
if descriptor in ent_desc :
if timeout < 0 :
if team and team . banned :
if err . args [ 0 ] in ( errno . EAGAIN , errno . EWOULDBLOCK ) :
elif attr == "hidden" :
if self . finished :
if self . has_gender_differences :
if ind < len ( strings ) and strings [ ind ] . startswith ( " " ) :
if self . _oauth_creds . access_token_expired :
if m is None :
if saved is missing :
if expression_type != "ecma5.1" :
if ( tweet [ "place" ] or { } ) . get ( "name" ) == "Manhattan" :
if order == 0 :
if a < b :
if loop_count % 5 == 0 :
if h not in self . masks :
if subtree is None :
if event . num_clicks == 2 :
if prefix in candidates :
if self . _index == self . _length :
if _unreserved [ i ] :
if self . messages . get ( "invalid_signup_code" ) :
if member [ 0 ] == key :
if document . sender :
if keras . backend . image_data_format ( ) == "channels_first" :
if value . country_code and value . national_number :
if other not in self . ignoreExprs :
if not exist_ok or not self . is_dir ( ) :
elif dirs [ m , n ] == "<" :
if ext not in self . ext_whitelist :
elif inspect . ismodule ( obj ) :
if val_c is None :
if "=" in opt and opt . startswith ( "--" ) :
if retval :
if thelist . immutable :
if raw_tag and raw_tag . hasattr ( slug ) :
if bos_token == "" :
if item [ 0 ] == key :
if "import" in line and "_help" in line and not updated :
if s . startswith ( "/" ) :
if os . path . exists ( dbpath ) :
if uid in self . users_info :
if not type ( self . options [ option ] ) in [ bool , int ] :
if not dest . parent . is_dir ( ) :
if total_length <= max_length :
if "min_amount_spent" in add_channel . keys ( ) :
if not service_name . startswith ( self . _name_prefix ) :
if name not in ( os . curdir , os . pardir ) :
if target_str == source_str :
if self . debug :
elif in_section :
if hbyte == 0 :
if done :
if action == "deletion" :
if ki != 0 :
if not entry . name . startswith ( "." ) and entry . is_dir ( ) :
if fixed . packet_type is not PUBLISH :
if fname == "output" :
if ts . raw_reward is not None :
if line . startswith ( "-" ) :
if not obj_change . get_sensitive ( ) :
if not isinstance ( data , dict ) :
if not inst . modctxt :
if semicolon < 0 or has_xml < semicolon :
if issubclass ( target , mapperlib . Mapper ) :
if font is None :
if groupby . op . output_types [ 0 ] == OutputType . dataframe_groupby
if self . encryption_password is not None :
if int ( month ) < 1 or int ( month ) > 12 :
if isinstance ( data , dict ) :
if isinstance ( expected_ffi_error , str ) :
if processor is None :
if query in search_source :
if self . server . ssl_context is not None and is_ssl_error ( e ) :
if exc_value is error :
if isdir ( dep ) :
if "{%s}" % self . namespace in child . tag :
if ":" not in tag :
if len ( sessionCodeMatch ) > 0 :
if not obj :
if len ( v ) != len ( newv ) :
if expr is None :
if os . path . exists ( os . path . join ( itempath , "__init__.py" ) ) :
if size == - 1 :
if command_path or param_help or cmd_help :
if response . get ( "NextPageMarker" ) :
if not isinstance ( item , unicode ) :
if utils . row_at ( self . view , s . a ) != utils . row_at ( self . view , self . view . size ( ) ) :
if match :
if not model_site [ "is_observed" ] :
if self . is_translationproject ( ) :
if "/" in rest :
if not self . has_src :
elif piece :
if o . start <= now <= o . end :
if get_cfn_param ( cfn_params , "Scheduler" ) == "awsbatch" :
if not l :
elif i == _range [ 1 ] + 1 :
if command_line . line_range . start :
if clean . startswith ( "Severity:" ) :
if chart . insert ( new_edge , ( ) ) :
if self . op == "+" :
if x > 200 :
if not self . old_stderr :
if button == "A" and data [ 0 ] == 0 :
if bias :
if module :
if isinstance ( p , ( Patch , Ref , Attribute ) ) :
if fname == "PureMVC_Python_1_0" :
if not includeAll :
if not old_obj . summary :
if envvar in os . environ :
if len ( self . field ) > 0 :
if pos is not None :
if part . type == "body" :
if ( datetime . now ( ) + limit ) < value :
if len ( map ) == len ( names ) :
if key != "#" and spaceless :
if len ( x ) < self . heap_limit :
if dtype is np . complex64 and f_name in [ "scatter_min" , "scatter_max" ] :
if type_id in self . items :
if continuation_pattern . search ( line ) :
if constants . rpmCheck or Scheduler . _checkNextPackageIsReadyToBuild ( pkg ) :
elif obj . use_scope is None :
if "__init__.py" in filenames :
elif failonerror :
if "r" in self . _mode :
if ( e . errno , e . strerror ) != ( 98 , "Address already in use" ) :
elif re . search ( r"^\s*\/\/" , source ) :
if units == "units" :
elif stmt . attr_key == "storage_alignment" :
if j == 0 :
if comm . size <= in_channels :
if "%s%s" % ( wrong , nr ) in nzb_name . lower ( ) :
if f == "status" :
if length <= self . LENGTH_LIMIT_BLOB :
if y == 0 :
if not unified_job . event_processing_finished :
if task :
if len ( v ) == 0 and not allow_empty :
if uri :
if step_input . source_handles :
if item in self . _expire_time and self . _expire_time [ item ] < datetime . now ( ) :
if not start :
if loaded_param :
if w :
if not os . environ . get ( var ) :
if name == "_id" or name == "_id_" or name in indexes :
if not os . path . exists ( target_path ) :
if self . _multichoice_head_key in state_dict :
if not m :
if self . _pMyMenuBar is None :
if isinstance ( module , ConvModule ) and isinstance ( module . conv , nn . Conv2d ) :
if isinstance ( e , exc_cls ) :
if script . startswith ( "http" ) :
if field . auto_created and not field . concrete
elif classname in self . treatAsSkip :
if len ( str ( o ) ) > 2 or not p :
if ex . args [ 0 ] not in ignored_errors :
if f in outputfiles or f in inputfiles :
if isinstance ( flags , basestring ) :
if not self . _isWidgetContainer ( child ) :
elif name . startswith ( "SCLEX_" ) :
if "message" in content :
if width < x :
if preferences_widget :
if prefix_words_are_adj :
if not cycle :
if hasattr ( layer , "W" ) :
if job . params [ "parentjob" ] not in liftoverjobs :
if self . consequent :
if "axis" in self . args :
if m :
if isinstance ( args [ 0 ] , cls ) :
if pendingCharacters :
if pos_end >= pos_start :
if self . _flags [ fname ] == 1 :
if x_client [ 0 ] . op == crossentropy_softmax_argmax_1hot_with_bias :
if distance >= 25 :
if text . strip ( ) . lower ( ) == "none" :
if isinstance ( text , ( CodeViewText , ShellText ) ) and text . is_python_text ( ) :
if not node . name . startswith ( "_" ) :
if op . stage == OperandStage . map :
if ends [ i ] == min_end :
if len ( a ) == 1 :
if exclude_unset :
if type ( field ) in [ models . CharField , models . TextField ] and type ( value ) == str :
if value is None :
if limit and len ( tags ) >= limit :
if app . is_running and getattr ( app , "debug" , False ) :
if q is None or error is not None :
if value & 0x80 :
if ttype == SCE_PL_UNUSED :
if item < vector [ - 1 ] :
if value and value != "" :
if is_terminated or ( deadline is not None and time . time ( ) > deadline ) :
if not GPIO . input ( stoppushbutton ) :
if support . IPV6_ENABLED or exc . errno != errno . EAFNOSUPPORT :
if e . kind == "die" :
if self . ignore_exc :
if not song . can_change ( tag ) :
if place_title != "" :
if buildType == "debug" :
if nm . startswith ( "." ) :
if not headers . has_key ( field [ 1 ] ) :
if 64 < n < 91 :
if len ( val ) == 0 :
if value [ 0 ] == "-" :
if not elem . tail or not elem . tail . strip ( ) :
if s <= 1 :
if not names and hasattr ( testCaseClass , "runTest" ) :
elif self . features . supports_timezones :
if d . conflict :
if obj . im_self is not None :
if uri . startswith ( "hdfs:///" ) :
if evt == "everything" :
if not p :
if x1 <= x <= x2 and y1 <= y <= y2 :
elif isinstance ( gate , ParityControlCell ) :
if k == neighbors . MULTI_EXIT_DISC :
if not isinstance ( v , str ) :
if qobj . connector == "AND" and not qobj . negated :
if self . connection . ops . oracle :
if not job_type :
if total_weightage != 100 :
if len ( split_provider_id ) == 2 :
if relation_is_present
if old_to . lower ( ) != dfl . lower ( ) :
if ri < 0 :
if API_CACHE . get ( url ) is None :
if stop is not None :
if args and pyfunction . get_module ( ) . get_resource ( ) is not None :
if lib2 in sys . modules :
if hasattr ( fd , "fileno" ) :
if os . path . exists ( target ) :
if len ( record ) == 6 and record [ 1 ] :
if isinstance ( type_info , rdf_structs . ProtoEmbedded ) :
if passive & INIT_OK :
if current . _parent is upto :
if result :
elif message [ "type" ] == "websocket.disconnect" :
elif r :
if self . scrolling :
elif decimal and isinstance ( val , decimal . Decimal ) :
if isinstance ( this , Quantity ) :
if token . value == "{" :
if self . set_extension_value ( ext_name , opt ) :
if isinstance ( attr , ( datetime . timedelta , datetime . datetime ) ) :
if is_published and not publication_date :
if bool ( random . getrandbits ( 1 ) ) :
if i >= length :
if os . getenv ( "TRUSTED_HOST" ) and should_rebase_environment_value ( name ) :
if i < len ( self . reprentries ) - 1 :
if item [ 0 ] == "." :
if self . dockwidget and not self . ismaximized :
if child . h . startswith ( tag ) :
elif hasattr ( args [ 0 ] , "items" ) :
if os . path . getsize ( self . _name ) == 0 :
if self . espStyleDecomposition and outneuron [ 0 ] in self . outmodules :
if i > 0 :
if possible_child_hash not in self . items :
if not accepted_chars . match ( w ) and len ( w ) <= 1 :
if not job_name . endswith ( ".json" ) :
if dataset_results . get ( idx ) :
if np . array_equal ( observed , self . blur3x3 ) :
if minGuide == None :
if self . commit_update [ "Updates" ] != [ ] :
if Cr . NS_SUCCEEDED ( result ) :
if position :
if optimizer_state is not None :
if command not in { "check" , "recheck" , "run" } :
if b . data in self . _initialized_instances :
if u in self . config . linkcheck_request_headers :
if video_packet . image is not None or not skip_empty_frame :
elif code == Path . CURVE3 :
if self . value . shape != ( self . layout . gaDims , ) :
if "loaded" in data_ :
if check [ : - 1 ] in module :
elif content_type == "text/html" :
if fid == 1 :
if bi . commandName == commandName :
if comps :
elif social . get ( key ) == [ ] :
if ref . namespace == "http://www.w3.org/2001/XMLSchema" :
if i + 1 < len ( text ) and text [ i ] == "\\" :
if e . errno == errno . ECHILD :
if separator in sortname :
if isinstance ( value , basestring ) :
if page . serial == info . serial :
if from_ > to :
if contents . strip ( ) :
if is_forwarded_environment_variable ( name ) :
if self . object . __contravariant__ :
if not safe_execute ( plugin . should_notify , group = group , event = event ) :
if n . _child . isidentical ( expr ) :
if "=" not in arg :
if prog . match ( line ) :
if isinstance ( node , Preprint ) :
if lbl :
if self . ClientsLogged [ str ( self . comboxBoxIPAddress . currentText ( ) ) ] [ "Status" ] :
if cellval . display != otherval :
if self . wafdetections [ wafvendor ] ( self ) :
if repository_metadata and repository_metadata . metadata :
if nextline [ : 3 ] == code and nextline [ 3 : 4 ] != "-" :
if not isinstance ( val , dict ) :
if self . multiSelect :
if not name in self . option_values :
if getattr ( view , "smart_indent_instance" , False ) == False :
if char in char_set :
if tt == 0 :
if ( crcreg & 1 ) != 0 :
if id_ is not None :
if n not in ( None , 0 ) :
if ev . isFinish ( ) :
if self . _element . text is not None :
if e . tag == "Iex_Get" :
if not frameinfo . code_context :
elif "error" in line :
if len ( path ) > 0 :
if default :
if template . get ( "body" ) != body :
if os . path . isdir ( path ) :
if name in available_providers :
if ares is self . cares :
if not isinstance ( contents , basestring ) :
if self . hl_text :
if node :
if not self . required :
if isinstance ( x , ast . AST ) :
if self . strip :
if os . path . isfile ( path ) :
if self . buf . endswith ( b"\n0\n" ) :
if b"PYTHONCASEOK" in _bootstrap_external . _os . environ :
if self . _mtime is None or mtime > self . _mtime :
if name == "likelihood.noise_covar.raw_noise" :
if "__enabled" in result :
if i == dryrun :
if left == right :
if self . _include_get_headers and request . headers != _DEFAULT_HEADERS :
if i < 10 :
if isinstance ( v , dict ) :
if reach_leaf :
if trial . state != TrialState . WAITING :
if score is None :
if block_end :
elif byteorder == 1 :
if content == ( "Salted__" ) :
if not is_mapped ( offset ) :
if account_id in config . get ( "celery.test_account_ids" , [ ] ) :
if row [ refnum + 1 ] is None :
if self . image_data :
if obj . use_scope :
if x . type in discrete_types :
if output . lower ( ) == "y" :
if self . _shape_name == sub_section . context . get ( "shape" ) :
if output . lower ( ) == "n" :
if index < 0 or index >= len ( self . features ) :
if len ( locator_parts [ 1 ] ) > 0 :
if season not in uniqueSeasons :
if b < 0 :
if parsed_context . path and parsed_context . fragment :
if not self . path_set ( self . table , keys , ( index , item ) ) :
if tag == "config" :
if section not in self . config :
if self . cursor_position > len ( self . value ) - 1 :
if not data :
if input . dequeue_count > max_dequeue_count :
if res :
if key == "hooks" :
if filename . endswith ( ".m3u" ) or filename . endswith ( ".m3u8" ) :
if "interval_aggs" in term_data :
if flags & FLAG_OVERFLOW :
if pattern . pattern_id == pattern_id :
if self . filter ( index , key , value ) :
if block :
if not data :
if record . _type in provider . SUPPORTS :
if ignore :
if _USE_QRECT :
if self . stopframe and frame . f_code . co_flags & CO_GENERATOR :
if self . storage_account_name is not None :
if NEXT_MESSAGE_OFFSET > 0 :
if self . request . query :
if value :
if not other_child . spec . repeated :
if ret_dict . has_key ( child . tag ) :
if item == value or item [ : - 1 ] == value :
if self . data . content_in_root :
if self . _needsNewline ( ) :
if not installed :
if type ( sockname ) is str :
if not out [ "success" ] :
if not tf . gfile . Exists ( unzip_dir ) :
if key not in environ :
elif isinstance ( value , list ) :
if pattern . match ( value ) is not None :
elif node . hasChildNodes :
if self . stories :
if runner . _spark_python_wrapper_path :
if ch == " " :
if not self . py3_wrapper . running :
if isinstance ( expr_rtype , RTuple ) :
if authtype == "Basic" and '"' not in params :
elif self . parent . nodeName == "li" and self . parent . childNodes [ 0 ] == self :
if f . rel and self == f . rel . to . _meta :
if errors :
if device_type . value == tvm . nd . cpu ( 0 ) . device_type :
if not self . short_only :
elif wrapped :
if not query_map [ alias ] :
if fname or ( pname and fname ) :
if ident != "" :
if mindate < created_at and maxdate > created_at :
if self . greenlet is not None :
if parse == "xml" :
if obj . blond :
if region . empty ( ) :
if isinstance ( val , dict ) :
if len ( block ) == len ( magic ) - 1 :
if aList :
if token is Name or token is Name . Class :
if "rsa_key_value" in value :
if prefixed :
if total == 0 :
if self . _log . isEnabledFor ( logging . DEBUG ) :
if POSIX :
if "STG-" in masking_view :
if calltip_char not in ( "?" , "(" ) or before or other :
if exclusive_start_tag_key and key < exclusive_start_tag_key :
if inspect . isclass ( value ) :
if isinstance ( p , tuple ) :
if "_id" in value and "_ns" in value :
if self . _bytes < 0 :
if not ls or ls [ 0 ] == "#" :
if initial_hash == hash_ :
if token . startswith ( "'" ) or token . startswith ( '"' ) :
if token . endswith ( suffix ) and len ( token ) > 5 :
if isinstance ( data , unicode ) :
if inputs is None :
if match is None :
if self . environment_id :
if ip . device is not None :
if not event . get_date_object ( ) :
if self . _transport_id in self . _parent . _transports :
if isinstance ( ty , SimTypeBottom ) :
if filename and filetypes :
if self . ctxsrcFullIdx < 0 :
if op . color :
if requested_namespace [ 0 ] is "*" :
if "discount_value" in add_channel . keys ( ) :
if key == "object" :
if ip . venture is not None :
if e . response is not None :
if sales_order :
if encoding :
elif not prefix == "" :
if hasattr ( self . log_file , "flush" ) :
if length_expr is None :
if value . lower ( ) not in ( "normal" , "bold" ) :
if p . wait ( ) != 0 :
elif field == "asset_id" :
if string [ idx + start_pos - 1 ] != "\\" :
if host and host [ 0 ] == "[" and host [ - 1 ] == "]" :
if hasattr ( self , slot ) :
if password is not None :
if match_word ( s , i , directive ) :
if timeout_at > self . _global_timeout_at :
if state == self . shipStates . moving :
if self . showAll :
if key != expected :
if pos_i_id not in pos_batch :
if type != fields [ - 2 ] :
if return_code == 0 :
if string_name not in hits_by_context_dict :
elif not line . strip ( ) :
if value is None :
if quasi :
if self . developer_comments :
if item [ field_name ] is not None :
if error == "AWS.ECommerceService.CartInfoMismatch" :
if geometry [ 0 ] > 180 or geometry [ 0 ] < - 180 :
if step_map [ map_key ] >= ( len ( step_map ) - 1 ) :
if path == paths [ - 1 ] :
if isinstance ( payload , bytes ) :
if f . read ( 1 ) == "1" :
if hasattr ( model , "_create_content_base" ) :
if module . bias is not None :
if ctype is None :
elif dirs [ m , n ] == "^" :
if line == "" :
if hasattr ( t , "isscalar" ) and t . isscalar ( ) and getattr ( r , "size" , None ) == 1 :
if not force_list and len ( values ) == 1 :
if isinstance ( prop , MoneyProperty ) :
if ret :
if last_time_replaced [ 0 ] :
if not str :
if only_select and not face . select :
if key not in six . iterkeys ( dct ) :
if not current_app . config [ "JSON_AS_ASCII" ] :
elif len ( value ) != 0 :
if "=" in p :
if run_all or exp_cfg [ "key" ] in keys :
if "/" not in key :
if sentence_splitter
if form . is_valid ( ) :
if len ( msg ) > 1000 :
if len ( err ) > 0 :
elif mod_type == imp . PY_COMPILED :
if open_files > self . MAX_OPEN_FILES :
if tt == 10 :
if not line or line . startswith ( "#" ) :
if len ( c ) == 4 :
if isinstance ( member , MethodType ) :
if nestedCount <= 0 :
if p . v in seen :
if not found :
if parent . isMarked ( ) :
if os . path . exists ( self . fifo_path ) :
if self . FindItemAtPosition ( ( r , c ) ) is not None :
if not id_chunk :
if val . dtype == tf . int64 :
if func in self . all_callees :
if "&amp;" in entry [ "url" ] :
if len ( topo_ ) > 0 :
if not value :
if self . callback :
if placeholders . exists ( ) :
if match in result :
if self . original . named_with_column :
if os . path . exists ( tour_path ) :
if self . md_bg_color == t . primary_color :
if isinstance ( request , numbers . Integral ) :
if not os . path . exists ( mh . getPath ( "render" ) ) :
if not hasattr ( THREAD_STORAGE , "html_parser" ) :
if code == Path . MOVETO :
if condvalue in rulefieldvalues :
if image :
if resp . match ( key [ : - 1 ] , val ) :
if accept_quality :
if session :
if HIDDEN_SETTINGS . search ( k ) :
if rflag :
if response . flags & dns . flags . TC :
if torch . is_tensor ( self . total_divisor ) :
elif self . wait_counter < self . wait_cntr_max :
if vh . filepath . endswith ( "sites-enabled/certbot.conf" ) :
if temp_id . startswith ( "product" ) :
if combo . GetLabel ( ) == "TR_VIRTUAL" :
if isinstance ( notebook , str ) :
if self . checkForStop ( ) :
if len ( subnet_ids ) > len ( matches ) :
if app_id in amo . APP_IDS :
if var in silent_vars :
if isolation == "REPEATABLE-READ" :
if "" in level_per_module :
if path :
if flags != 0 :
if not chrome_launched ( ) :
if tt == 0 :
if builtins . __xonsh__ . env . get ( "FORCE_POSIX_PATHS" ) :
if not isinstance ( key , int ) :
if error_code != errno . EAGAIN or error_code != errno . EWOULDBLOCK :
if user :
if not isinstance ( a , ( unicode_type , bytes ) ) :
if text [ 0 ] in " \n\x85\u2028\u2029" :
if fnmatch . fnmatchcase ( fnm , mask ) :
if getattr ( ct , attr ) != val :
if state :
if ii . space == "evex" :
if self . _has_parent :
if w :
elif isinstance ( IDispatch , unicode ) :
if return_type is bytes :
if key == "b" :
if field_val is _marker :
if match not in matches :
if chat_id and self . _usernames :
if len ( l ) < 5 :
if self . skip_start <= start < self . skip_end :
if valuable_length <= ddof :
if isinstance ( condition , core . SchemaBase ) :
if result . value :
if self . stopped ( ) :
if self . _progress_hook :
if name in d :
if n > count / 2 :
if i == "." or i == ".." :
if test_start >= net_start and test_end <= net_end :
if self . intextinput :
if p . len == 0 :
if sz > MAX_METADATA_VALUE_SIZE :
if not more :
if doc in values :
if not expiration . tzinfo :
if exc . winerror == errno . WSAEADDRINUSE :
if not rule . enabled :
if j == - 1 :
if p_old > p_new :
if isinstance ( err , AWSValidationException ) :
if not isinstance ( custom_statements , list ) :
if tmp not in self :
if is_recording == True :
if ind_f == len ( data_f ) :
if set ( rule [ "verbs" ] ) == set ( verbs ) :
if artifact_status [ "finalize" ] :
if not next_batch :
elif isinstance ( key , slice ) :
if self . match_function ( file ) :
if "nbgrader" not in cell . metadata :
if stop is not None and self . _pos > stop :
elif "left" in settings [ "event" ] :
elif case ( 1 , 2 ) :
if item [ "key" ] in TABLE :
if baked_mat in bpy . data . materials :
if all ( p . isGanged ( ) for p in self . getPlugs ( ) ) :
if isinstance ( expected , str ) :
if domain not in domains + exclusions :
if self . socket is not None :
if hasattr ( self . url_args , "__call__" ) :
if len ( repos ) < 100 :
elif subdir :
if len ( n . children ) > 0 :
elif isinstance ( results [ i ] , list ) :
if k . startswith ( "_" ) :
if len ( self . rlvec ) != 0 and len ( self . lrvec ) != 0 :
if device [ "id" ] != self . app . daemon . get_my_id ( ) :
if key == "color" :
if acc [ i ] is not None and vid in self . get_ids ( ) :
if d <= 1 :
if DISK_USAGE_MAX and du . percent >= DISK_USAGE_MAX :
if private :
if named :
if not batch :
if data_list [ 0 ] in forms . fields . EMPTY_VALUES :
elif old [ key ] != new [ key ] :
if subscription :
elif isinstance ( m , ( _BatchNorm , nn . GroupNorm ) ) :
if campaign == "prereg" or campaign == "erpc" :
elif isinstance ( arg , basestring ) :
if not f . endswith ( ".go" ) :
if path . startswith ( reserved_path ) :
if self . cov_type == "robust" :
if "pytorch" in module :
if self . type == "ASK" :
if not re . match ( MEMLIMIT_MATCH , str ( v ) ) :
if "Teams" in key :
if second_byte == 0x0F and self . amd_enabled :
if page_id in EMPTY_VALUES :
if _filepath in VFS :
if myDec >= 2 ** n :
if self . value not in NVMLError . _errcode_to_string :
if isinstance ( pathdir , bytes ) :
if isinstance ( self . object , string_types ) and self . object . endswith ( ".vtkjs" ) :
elif isinstance ( val , text_or_bytes ) :
if node is None :
if hasattr ( py_obj , "masks" ) and py_obj . masks :
if self . bytenum == len ( self . bytestream ) - 1 :
if image :
if "Version" in resp :
if stat . S_ISREG ( st . st_mode ) :
if action . type == "insert" :
if self . policy_attribute not in r :
if i :
elif not args . content_only :
if qparams :
if len ( self . playlist ) == 0 :
if r . ok :
if results :
if not fields :
if self . is_coinbase :
if self . abbrev :
if exc . response . status == 401 :
if util . get_hls_val ( self . color_list [ x ] , "light" ) < 99 :
if title :
if name == "user" and "user" not in self . session . params and self . api . auth :
if not prop_name in entity . unindexed_properties ( ) :
if self . debug :
if self . _current_iteration > self . hyperband_iterations :
if dep == goal_node_index :
if records :
if line [ 0 ] == " " :
if subscriber_web_sock == web_sock :
if withyear :
if things :
if isinstance ( t , Index ) :
if result == self . source :
if any ( item is None for item in value ) :
if hasattr ( event , attr ) :
if not self . process . healthy :
if isinstance ( inst , Assign ) and inst . value in self . getattrs :
if gravity [ 0 ] is not None and geomagnetic [ 0 ] is not None :
if todo [ 0 ] in graph . keys ( ) :
if not isinstance ( result , basestring ) :
if self . filters . show_delivery_notes :
if depends != "-" :
if len ( service_info . addresses ) > 0 :
if module . padding_idx is not None :
if occurrences . same_pyname ( self . pyname , pyname ) :
if type ( patch ) is dict :
if os . path . isdir ( path ) :
if os . path . isdir ( os . path . join ( bp_dir , path ) ) :
if inputs [ socket ] . hide_safe :
elif pos == "S" :
if not key :
if not filename . startswith ( os . sep ) :
if check_length :
elif not x . is_atom ( ) and not s . is_atom ( ) :
if self . instance . poll ( ) is not None :
if reverse :
if new_id != - 1 :
if os . path . exists ( base_dir ) :
if int ( self . page ) < int ( self . total_pages ) :
elif k == "created_at" :
if self . use_vector_id :
if name in code :
if result :
if not socket . hide == desired_hide_state :
elif isinstance ( parent , pytest . Module ) :
if line . strip ( ) . decode ( "ascii" ) == "#versions" :
if user and user . is_authenticated ( ) :
if token . endswith ( "\n" ) :
if not isConstructed :
if request is None :
if not self . _update_aes ( ) :
if result :
elif isinstance ( value , float ) :
if clients is not None :
if frappe . safe_eval ( pricing_rule . condition , None , doc . as_dict ( ) ) :
if ignore_none is True and kv_data [ k ] is None :
if isinstance ( v , NestedSpace ) :
if task_id not in self . task_host_failed_dict :
if m :
if resources is not None :
if ( "k8s" in r . text ) or ( '"code"' in r . text and r . status_code != 200 ) :
if parent_context :
if boxedChunks . issubset ( selectedChunks ) :
if _is_punctuation ( char ) :
if not logged :
if minDist == None or guideDist < minDist :
if tp == "write" :
if hasattr ( base , "trace" ) :
if value & 1 == 0 :
if "stage" not in item . keywords :
elif isinstance ( value , datetime . datetime ) :
if self . is_interesting ( target ) and target . status and target . status != 400 :
if tt == 24 :
if pusher_stats :
if marker :
if not isinstance ( arg , ConstMonad ) :
if sign * ki < - slop :
if isinstance ( item , Link ) :
if end_slash >= 0 :
if reverse :
if forward_only :
if self . utexc is False :
if not version :
if self . _opcodes :
if "help_text" in field :
if isinstance ( v [ i ] , dict ) :
if ss [ "patch" ] is not None :
if self . with_centering :
if key . lower ( ) == "content-length" :
elif len ( result ) == 2 :
if self . LT ( i ) :
if not_null :
if self . _CSRFtoken != None :
if key == "status" and progress_stats [ "playlist_index" ] :
if not isinstance ( data , list ) :
if scanparser . match ( line ) >= 0 :
if digest not in digests :
if result :
if rightname [ 0 ] == "@" :
if len ( input_shape ) == 2 :
if i == _range [ 0 ] - 1 :
if ctype == "D" :
if utils . is_media_file ( uri ) == True :
if path [ "isdir" ] :
if not isinstance ( progress , str ) :
if attribute . startswith ( "k" ) and isinstance ( value , int ) :
if data_load is not None :
if f :
if len ( splitrow ) > 0 :
if adj is None :
if param in facts [ role ] :
if len ( value ) not in ( 2 , 3 ) :
if isinstance ( data [ "expires" ] , date ) :
if sc . name == name :
if "LockDate" in r :
if type ( test . value ) in self . _const_types :
if max_discount and flt ( self . discount_percentage ) > flt ( max_discount ) :
if not checks . is_cce_value_valid ( "CCE-" + str ( i_value ) ) :
elif elem . tag == "alias" :
if fn . __name__ != expected_name :
if ":" in row [ "Splitratio" ] :
if isinstance ( testdef . exception , Exception ) :
if avail [ 1 ] is not None and avail [ 1 ] < count :
if li >= BLOCKLEN :
if self . __wrap . type_field in son :
if not self . sorted :
if params :
if not scenario :
if os . path . isfile ( filename ) :
if element_location < 0 :
if tt == 16 :
if force_generic :
if exclude_meta and field . meta :
if self . sl_hdlr :
if count > 10 :
if message_type is OrderBookMessageType . SNAPSHOT :
if unique_value_count == 1 :
if align_corners :
elif current . _parent is None :
if name in self :
if preferred :
if link_fingerprint in links_deduped :
if i != len ( issue_nos ) - 1 :
if "." in messenger [ "type" ] :
if field . expression :
if timeout is None :
if pem_object . get ( "key_enc" , False ) :
if isinstance ( nucleotide_seq , Seq . Seq ) :
if max_el is None or el > max_el :
if count % 1000 == 0 :
if not add :
if hasattr ( core , "get_generators" ) :
if not self . body . is_discrete :
if self . _delayed_completion_id is not None :
if resp and resp . status_code == 200 and "member" in resp . json ( ) :
if day_rule ( ) and time_rule ( ) :
elif c == "-" and decode :
if resp :
if self . vjps == { } :
if isinstance ( iterable , ( dict , StenoDictionary ) ) :
if language :
if hasattr ( a , name ) :
if item [ "layout" ] == "horiz" :
if value is not None :
if isinstance ( request , dict ) and ( request or body_is_optional ) :
if entry is False :
if not getattr ( frame , "_node" , None ) :
if "dir" in kw :
if other_folder == folder :
if test_lit :
if i == self . _skip - 2 :
if arg . startswith ( "from_" ) or method is None or not inspect . ismethod ( method ) :
if "subjects_dir" in inputs :
if self . queryset is not None :
if self . is_pyi and is_stub_body ( node ) :
if self . _pendingSize < 0 :
if not job_name :
if content :
if i < k - 1 :
if not graphene_type in self . _typeMap :
elif size <= 6 :
if out and sep :
if response == "" :
if "." in valname :
if exc_info is None :
if not hasattr ( g , "not_equal" ) :
if config . resolver_nameservers :
if 0 <= term < 65536 :
if isinstance ( v , dict ) :
if offset :
if family :
if request . mongo_retry :
if ndef [ "color" ] :
elif char == self . labels [ self . space_index ] :
if nodelist [ i - 1 ] . type == token . PLUS :
if start is not None :
if len ( job . _directPredecessors ) > 0 :
if self . _is_true ( self . visit ( comparator_node , element ) ) :
elif x == y :
if "filter" in key_name :
if active_form and self . _prev_action_listen_in_state ( states [ - 1 ] ) :
if lastBase and parts [ 0 ] != lastBase :
elif vw . isValidPointer ( item ) :
if dict1 [ option ] == - 1 :
if s . get ( "status" ) == "Failure"
if err :
if extra :
if not self . __queue . empty ( ) :
if args . elapsed :
if requestor_has_access_to_all or page . is_visible
if os . isatty ( sys . stdout . fileno ( ) ) :
if args is None :
if hasattr ( args [ 0 ] , "iteritems" ) :
if i . startswith ( "DB" ) and i . endswith ( "Error" ) :
elif isinstance ( sink , ChannelT ) :
elif str_in [ pos ] == end_tag :
if confirm_form . is_valid ( ) :
if response . status_code != 200 :
if tok . visibility == "private" :
elif not start :
if self . should_open_name_in_thonny ( name ) :
if _product_matches_cve ( product , cve_entry ) :
if APP_CONFIG . nobuild_files . match ( f ) :
if filename in cache :
if item [ 0 ] :
if encoders :
if os . environ . has_key ( key ) :
if not condition_result :
elif "." in svalue :
if song in app . library :
if self . linear_self . bias is not None :
if self . any_match :
if element [ 2 ] is not None :
if "shutdown" in g . app . debug :
if self . roundtriptest :
if not line . startswith ( "#" ) :
elif isinstance ( value , ( ContentTypeMapping , ContentTypeDetector ) ) :
if type ( value ) is bool :
if not line :
if not read_data :
if self . _call_count > self . ctl or age > self . ttl :
if type ( f ) == unicode :
if value is not None :
if not self . connection . server . info :
elif isinstance ( k , bool ) :
if level == 2 :
if any ( ( key == env_key for env_key in environment_keys ) ) :
if name in self . ctrls :
if challenge :
if self . gramplet_map [ title ] . gstate != "detached" :
if check_password_hash ( u . password , password ) :
if self . allow_todays_date :
if hasattr ( E , "keys" ) :
if count <= 0 :
if is_atty :
if isinstance ( k , bytes ) :
if attr not in node . attributes :
if dsn [ i ] . isspace ( ) :
if isinstance ( button , obj_class ) :
if idx >= 0 :
elif fn . endswith ( ".png" ) :
if identifier in self . _values :
if e . errno != errno . ENOENT :
if place :
if encoding not in broken_unicode_with_stateful :
if os . path . splitext ( f ) [ 1 ] == ".desktop" :
if applied_item . expire_ms > 0 :
if not cp or dist < cd :
if m :
elif node . binary == BINARY_INVALID :
if ";" in date_hdr :
if value != 1 :
if isinstance ( lastnode . sub [ - 1 ] , unicode ) :
if not self . check_token ( BlockEntryToken , KeyToken , ValueToken , BlockEndToken ) :
if verbose :
if self . interface . parent is None :
if exc :
if isinstance ( self . obj , ( dict , web . threadeddict ) ) :
elif self [ tag ] != values :
if not wx . TheClipboard . IsOpened ( ) :
if found == - 1 :
if isinstance ( v , inner_class ) and v not in view . get_init_inner_views ( ) :
if tt == 18 :
if comment not in f . read ( ) :
if klass . detect ( path , source ) :
if hasConst :
if self . role == "standby_leader" :
if f in FIELDS_BY_COUNTRY . get ( self . country , { } ) :
if vm_details == "Absent" :
if translation is not None :
if self . count == 0 :
if len ( chunk ) < _CAT_CHUNK_SIZE :
if _interop . _all ( tests ) and ( custom_match is None or custom_match ( d ) ) :
elif hasattr ( self . object , "read" ) :
if error not in str ( ex ) :
if r < min_r :
if data and isinstance ( data [ 0 ] , bytes ) :
if self . backend . name != other . backend . name :
if i == start :
if data [ tok_idx ] [ feat_idx ] is None :
elif n not in fields :
if tt == 10 :
if name . startswith ( "<" ) and name . endswith ( ">" ) :
if not s :
if self . cluster_rpcserver :
if not architecture_file :
if mpii_idx in mpii_keys :
if config . header and config . header_service :
if o [ "symbol" ] == convert_to_exchange_trading_pair ( trading_pair )
if not validate_hotp_secret ( user , otp_secret ) :
if match . search ( vurl ) :
if "subtitle_language" in result :
if filename [ 0 ] == "." :
if key_to_insert in units :
if site_classes [ n ] . get ( "branch types" ) is None :
if module_obj :
if value :
if p . v . children :
if img . width == width and img . height == height :
if type ( input_types [ 0 ] ) != list :
if not isinstance ( e , self . quiet_exceptions ) :
elif step_num < 30000 :
if arn in current_topics :
if len ( expectedPrefix ) + 5 < len ( text ) :
if v is None :
if not os . path . isfile ( self . _name ) :
if path not in after :
if config . get ( "environment" ) == "prod" :
if config is None :
if not default_id :
if ret :
elif was_selected :
if isdir ( path ) :
if str . lower ( key ) == str . lower ( resource_provider ) :
if a not in rule :
if allow_exception :
if file . state == File . NORMAL :
if menu :
if cls_ :
if area is None :
if name == "wait" :
if self . files [ i ] [ 0 ] == n :
if not ureg . Quantity ( value ) . check ( dim ) :
if strlen < MAX_LEN :
if self . _fd_holder . closed :
if tab [ 0 ] == "socks" :
if supers :
if t is not None :
if cursor :
if not self . process :
if self . _prompt is None :
if os . path . exists ( filename ) :
if not IOBASE_EMITS_UNRAISABLE :
if postdata != { } :
if "<html" in f . read ( 100 ) . lower ( ) :
if self . status != NEW :
if not any ( var . item == item for var in variations ) :
if tt == 0 :
if x . inode == inode :
if self . _next_target is not None :
if p >= self . get_len ( ) :
if self . keys is None :
if contains_actions ( mutex_actions , actions ) :
if init_service and init_service in dep_cnt [ "_deps" ] :
if not info :
if e . error == "user_is_bot" :
if len ( i ) == 0 :
if enc_key :
if p == req_port :
if nodeid not in self . _nodes :
if has_wildcard and is_logging and self . is_fresh ( trail_details ) :
if test_id in sb_config . _results . keys ( ) :
if output == input :
if m [ 0 ] == "" :
if random . random ( ) < 0.5 :
if good . find ( digit ) != - 1 :
if not ( code is not None and 48 <= code <= 57 ) :
if hkey . lower ( ) . startswith ( metadata_prefix ) :
if processed_any :
if self . revs_enabled :
if not isinstance ( dep , dependencies . Dependency ) :
if stream is not None :
if is_good_mod_exp_first ( A , p ) :
elif no == EAGAIN :
if not isinstance ( child , minidom . Element ) :
if "tensor" in tmp :
if keys [ cur_depth ] in source :
if mo :
if rel_obj :
if func . type in support_set :
if name not in self . plugins_callback_order and plugin . is_activated
if token . token_type == TOKEN_TEXT :
if key == "spider_modules" :
if settings . MAX_PAGE_SIZE :
if event [ "handler_check" ] ( handler ) :
if tt == 0 :
if self . _createInstanceBinders . ContainsKey ( info ) :
if "uuid" in body and body [ "uuid" ] :
if var . info . fallback_to_any :
elif col == BARRIER :
if answer . upper ( ) == "F" :
if count == 1 :
if cent :
if prop is not "members" :
if key == "access_token" and value in user_pool . access_tokens :
if fixed . packet_type is not PUBREL :
if self . _selectedFile :
if parameter_range_key == "scaling_type" :
if current is not None :
if loc and loc [ L_LTYPE ] == LOC_STRING and loc [ L_VA ] > va :
if must_stop ( mp_result . result , self . ns ) :
if out :
if not ret :
if e . message != self . ZONE_NOT_FOUND_MESSAGE :
if artist . count ( ) :
if attrvalue == 0 :
if not self . closed :
if len ( t ) == 2 :
if self . norm_vars :
if k not in [ "currency" , "sales_person" ] :
if cond :
if len ( fields ) < 2 :
if has_result :
if self . type == Segment . CCW :
if v == "ANY" :
if threading . current_thread ( ) == threading . main_thread ( ) :
if fixed . packet_type is not PINGRESP :
if fut . done ( ) :
if i != 0 :
if Types . KEYS not in obj :
if token . OpensScope ( ) :
if os . path . isdir ( path ) :
if self . width not in [ 100 , 50 , 33 , 25 ] :
if context . next_indent < context . indent :
if index is not None :
if expected_err not in str ( exc ) :
if op_agen ( op ) or ( op_mem ( op ) and op . oc2 in [ "v" ] ) :
if not self . focus_color :
if key in self . unfiltered_metadata :
if not queryQueueByAfterNateRsp . get ( "status" ) :
if not line :
if comment :
if hasattr ( pricings_list , "value" ) :
if doc is not None :
if right == len ( text ) :
if self . view . block :
if s . siblingAbove is None :
if reset == ACTIVE_LOW :
if "self" in stack [ 0 ] . f_locals :
if isinstance ( self . subheader , RenderedContent ) :
if form . is_valid ( ) :
elif interchangeable ( flat_fee [ 0 ] , quote ) :
if sys . version_info > ( 3 , 0 ) :
if options . task_name :
if dimension . is_flat and not dimension . has_details :
if "~#rating" in song :
elif not self . word_boundary_char ( text [ right ] ) :
if self . _data_wrapper is not None :
elif self . split < 0.5 :
if not shortok :
if rel != [ OIC_ISSUER ] :
if token in self . basic_tokenizer . never_split :
if len ( e . args ) == 1 :
elif key == "points" :
if cls . __process__ :
if isinstance ( pyclass , pyobjects . AbstractClass ) :
if result :
if not voice_state :
if "*" in fromlist :
if pricing_file :
